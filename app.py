import streamlit as st
import requests
from datetime import datetime, timedelta

# Load API key from Streamlit Secrets (secure - set this in Streamlit Cloud dashboard)
WEATHER_API_KEY = st.secrets.get("WEATHER_API_KEY", "a471efb91f4c4e29ac9135831252209")  # Fallback for local testing

# Crop to pesticide mapping (Hindi descriptions)
pesticide_suggestions = {
    "wheat": "рдлрдВрдЧреАрд╕рд╛рдЗрдб XYZ (рдЙрджрд╛рд╣рд░рдг: рдХрд╛рд░реНрдмреЗрдВрдбрд╛рдЬрд┐рдо) - рдЬрдВрдЧ рдФрд░ рд╕реНрдордЯ рд╕реЗ рд╕реБрд░рдХреНрд╖рд╛ред",
    "rice": "рдХреАрдЯрдирд╛рд╢рдХ ABC (рдЙрджрд╛рд╣рд░рдг: рдЗрдорд┐рдбрд╛рдХреНрд▓реЛрдкреНрд░рд┐рдб) - рддрдирд╛ рдмреЛрд░рд░ рдФрд░ рдкрддреНрддреА рдлреЛрд▓реНрдбрд░ рдирд┐рдпрдВрддреНрд░рдгред",
    "maize": "рдЦрд░рдкрддрд╡рд╛рд░рдирд╛рд╢рдХ DEF (рдЙрджрд╛рд╣рд░рдг: рдПрдЯреНрд░рд╛рдЬреАрди) - рдШрд╛рд╕ рдФрд░ рдЪреМрдбрд╝реА рдкрддреНрддреА рд╡рд╛рд▓реЗ рдЦрд░рдкрддрд╡рд╛рд░ рдкреНрд░рдмрдВрдзрдиред",
    "cotton": "рдХреАрдЯрдирд╛рд╢рдХ GHI (рдЙрджрд╛рд╣рд░рдг: рдПрдВрдбреЛрд╕рд▓реНрдлрд╛рди) - рдмреЛрд▓рд╡рд░реНрдо рдФрд░ рдПрдлрд┐рдбреНрд╕ рдкрд░ рдирд┐рд╢рд╛рдирд╛ред",
    "sugarcane": "рдХреАрдЯрдирд╛рд╢рдХ JKL (рдЙрджрд╛рд╣рд░рдг: рдХреНрд▓реЛрд░рдкрд╛рдпрд░реАрдлреЙрд╕) - рдмреЛрд░рд░ рдФрд░ рджреАрдордХ рд╕реЗ рд▓рдбрд╝рд╛рдИред",
    # Add more: e.g., "potato": "Some pesticide in Hindi"
}

# States and Districts (simple dict - add more as needed)
states_districts = {
    "рдкрдВрдЬрд╛рдм": ["рд▓реБрдзрд┐рдпрд╛рдирд╛", "рдЕрдореГрддрд╕рд░", "рдЬрд╛рд▓рдВрдзрд░", "рдкрдЯрд┐рдпрд╛рд▓рд╛"],
    "рд╣рд░рд┐рдпрд╛рдгрд╛": ["рдХрд░рдирд╛рд▓", "рдЕрдВрдмрд╛рд▓рд╛", "рдХреБрд░реБрдХреНрд╖реЗрддреНрд░", "рд╕рд┐рд░рд╕рд╛"],
    "рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢": ["рд▓рдЦрдирдК", "рдХрд╛рдирдкреБрд░", "рдЖрдЧрд░рд╛", "рд╡рд╛рд░рд╛рдгрд╕реА"],
    # Add more states: e.g., "рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░": ["рдореБрдВрдмрдИ", "рдкреБрдгреЗ"]
}

# Crop prices: National average for India (from Agmarknet - update weekly; focused on Ludhiana crops but India-wide)
# Format: {"crop": {"modal_price": 2300, "min_price": 2200, "max_price": 2400, "avg_yield_quintal_per_acre": 20}}
crop_prices = {
    "wheat": {"modal_price": 2300, "min_price": 2200, "max_price": 2400, "avg_yield_quintal_per_acre": 20},  # National avg
    "rice": {"modal_price": 2000, "min_price": 1900, "max_price": 2100, "avg_yield_quintal_per_acre": 25},
    "maize": {"modal_price": 1700, "min_price": 1600, "max_price": 1800, "avg_yield_quintal_per_acre": 18},
    "cotton": {"modal_price": 6000, "min_price": 5800, "max_price": 6200, "avg_yield_quintal_per_acre": 10},
    "sugarcane": {"modal_price": 330, "min_price": 320, "max_price": 340, "avg_yield_quintal_per_acre": 400},
    # Update from agmarknet.gov.in for national/Ludhiana data
}

# Streamlit App (Hindi title and config)
st.set_page_config(page_title="10-рджрд┐рди рдореМрд╕рдо рдФрд░ рдлрд╕рд▓ рд╕рд▓рд╛рд╣ рдЪреИрдЯрдмреЙрдЯ", page_icon="ЁЯМдя╕П", layout="centered")

st.title("ЁЯМдя╕П рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП 10-рджрд┐рди рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди рдФрд░ рдлрд╕рд▓ рд╕рд▓рд╛рд╣ рдЪреИрдЯрдмреЙрдЯ")
st.markdown("---")

# Initialize session state for steps (no chat input - button-based)
if "step" not in st.session_state:
    st.session_state.step = 0  # 0: State, 1: District, 2: Weather, 3: Crop, 4: Pesticide, 5: Prices
if "selected_state" not in st.session_state:
    st.session_state.selected_state = ""
if "selected_district" not in st.session_state:
    st.session_state.selected_district = ""
if "selected_crop" not in st.session_state:
    st.session_state.selected_crop = ""

# Function to fetch 10-day forecast for selected district
@st.cache_data(ttl=1800)  # Cache for 30 minutes
def get_10day_forecast(district):
    days = 10
    url = f"http://api.weatherapi.com/v1/forecast.json?key={WEATHER_API_KEY}&q={district},India&days={days}"
    try:
        response = requests.get(url)
        data = response.json()
        if response.status_code == 200:
            forecast_list = []
            for i in range(days):
                day_data = data["forecast"]["forecastday"][i]
                date = day_data["date"]
                max_temp = day_data["day"]["maxtemp_c"]
                min_temp = day_data["day"]["mintemp_c"]
                avg_temp = day_data["day"]["avgtemp_c"]
                condition = day_data["day"]["condition"]["text"]
                # Hindi condition mapping (simple)
                hindi_condition = condition  # Keep English or translate if needed
                weather_emoji = "тШАя╕П" if "sunny" in condition.lower() else "ЁЯМдя╕П" if "cloudy" in condition.lower() else "ЁЯМзя╕П" if "rain" in condition.lower() else "тЫЕ"
                forecast_list.append({
                    "date": date,
                    "max_temp": max_temp,
                    "min_temp": min_temp,
                    "avg_temp": avg_temp,
                    "condition": hindi_condition,
                    "emoji": weather_emoji
                })
            return forecast_list
        else:
            return None
    except Exception as e:
        st.error(f"рдореМрд╕рдо рдбреЗрдЯрд╛ рд▓рд╛рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")
        return None

# Function to get pesticide suggestion (Hindi)
def get_pesticide_suggestion(crop):
    crop_lower = crop.lower().strip()
    if crop_lower in pesticide_suggestions:
        return pesticide_suggestions[crop_lower]
    else:
        return "рдЗрд╕ рдлрд╕рд▓ рдХреЗ рд▓рд┐рдП рдХреЛрдИ рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╕реБрдЭрд╛рд╡ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВред рд╕реНрдерд╛рдиреАрдп рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рд▓реЗрдВред"

# Function to display crop prices (National India-wide, Ludhiana crops focus)
def get_crop_prices_display(user_crop):
    if not crop_prices:
        return "рдореВрд▓реНрдп рдбреЗрдЯрд╛ рдЕрднреА рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВред agmarknet.nic.in рдкрд░ рдирд╡реАрдирддрдо рдЬрд╛рдВрдЪреЗрдВред"
    
    # Build Hindi markdown table for national comparison
    table_lines = ["**рднрд╛рд░рдд рдХреЗ рд╡рд░реНрддрдорд╛рди рдордВрдбреА рдореВрд▓реНрдп (тВ╣ рдкреНрд░рддрд┐ рдХреНрд╡рд┐рдВрдЯрд▓) - рдЕрдкрдбреЗрдЯ: " + datetime.now().strftime("%Y-%m-%d") + "**",
                   "| рдлрд╕рд▓ | рдореЛрдбрд▓ рдореВрд▓реНрдп | рдиреНрдпреВрди-рдЕрдзрд┐рдХрддрдо | рдЕрдиреБрдорд╛рдирд┐рдд рдЖрдп/рдПрдХрдбрд╝ (тВ╣) |",
                   "|------|-------------|-------------|-----------------------|"]
    
    total_revenue_estimate = 0
    crop_lower = user_crop.lower().strip()
    for crop, data in crop_prices.items():
        modal = data["modal_price"]
        min_max = f"{data['min_price']}-{data['max_price']}"
        yield_q = data["avg_yield_quintal_per_acre"]
        revenue = modal * yield_q
        table_lines.append(f"| {crop.capitalize()} | {modal} | {min_max} | {revenue:,} |")
        
        if crop_lower == crop:
            total_revenue_estimate = revenue
    
    table = "\n".join(table_lines)
    
    # Hindi message
    msg = f"{table}\n\n**рдЖрдкрдХреА рдлрд╕рд▓ ({user_crop}) рдХреЗ рд▓рд┐рдП:** рдПрдХрдбрд╝ рдкреНрд░рддрд┐ рдЕрдиреБрдорд╛рдирд┐рдд рдЖрдп: тВ╣{total_revenue_estimate:,} (рдФрд╕рдд рдЙрдкрдЬ {crop_prices.get(crop_lower, {}).get('avg_yield_quintal_per_acre', 0)} рдХреНрд╡рд┐рдВрдЯрд▓/рдПрдХрдбрд╝ рдкрд░ рдЖрдзрд╛рд░рд┐рдд)ред рдЕрдиреНрдп рдлрд╕рд▓реЛрдВ рд╕реЗ рддреБрд▓рдирд╛ рдХрд░реЗрдВ!\n\n*рдиреЛрдЯ: Agmarknet рд╕реЗ рд░рд╛рд╖реНрдЯреНрд░реАрдп рдФрд╕рдд (рд╕реНрдерд┐рд░ рдирдореВрдирд╛тАФрдХреЛрдб рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ рд░реАрдпрд▓-рдЯрд╛рдЗрдо рдХреЗ рд▓рд┐рдП)ред рд╡рд╛рд╕реНрддрд╡рд┐рдХ рд▓рд╛рдн = рдЖрдп - рд▓рд╛рдЧрдд (рдмреАрдЬ, рд╢реНрд░рдо рдЖрджрд┐)ред рд╕реНрдерд╛рдиреАрдп рдордВрдбреА рдЬрд╛рдВрдЪреЗрдВред*"
    
    return msg

# Main App Logic (Button-based steps)
if st.session_state.step == 0:
    st.header("ЁЯМН рдЕрдкрдирд╛ рд░рд╛рдЬреНрдп рдЪреБрдиреЗрдВ")
    selected_state = st.selectbox("рд░рд╛рдЬреНрдп:", list(states_districts.keys()))
    if st.button("рд░рд╛рдЬреНрдп рдЪреБрдиреЗрдВ ЁЯСЖ", key="select_state"):
        st.session_state.selected_state = selected_state
        st.session_state.step = 1
        st.rerun()

elif st.session_state.step == 1:
    st.header(f"ЁЯУН {st.session_state.selected_state} рдореЗрдВ рдЕрдкрдирд╛ рдЬрд┐рд▓рд╛ рдЪреБрдиреЗрдВ")
    districts = states_districts.get(st.session_state.selected_state, [])
    selected_district = st.selectbox("рдЬрд┐рд▓рд╛:", districts)
    if st.button("рдЬрд┐рд▓рд╛ рдЪреБрдиреЗрдВ ЁЯСЖ", key="select_district"):
        st.session_state.selected_district = selected_district
        st.session_state.step = 2
        st.rerun()

elif st.session_state.step == 2:
    st.header(f"ЁЯМдя╕П {st.session_state.selected_district} рдХреЗ рд▓рд┐рдП 10-рджрд┐рди рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди")
    forecast_data = get_10day_forecast(st.session_state.selected_district)
    if forecast_data:
        st.markdown("**рдЖрдЬ рд╕реЗ рд╢реБрд░реВ 10-рджрд┐рди рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди:**")
        for day in forecast_data:
            st.markdown(f"- **{day['date']}** {day['emoji']}: рдЕрдзрд┐рдХрддрдо {day['max_temp']}┬░C / рдиреНрдпреВрдирддрдо {day['min_temp']}┬░C | рдФрд╕рдд {day['avg_temp']:.1f}┬░C | {day['condition']}")
        col1, col2, col3, col4, col5 = st.columns(5)
        with col1:
            if st.button("рдЧреЗрд╣реВрдВ ЁЯМ╛", key="crop_wheat"):
                st.session_state.selected_crop = "wheat"
                st.session_state.step = 3
                st.rerun()
        with col2:
            if st.button("рдЪрд╛рд╡рд▓ ЁЯЪА", key="crop_rice"):  # Emoji for rice
                st.session_state.selected_crop = "rice"
                st.session_state.step = 3
                st.rerun()
        with col3:
            if st.button("рдордХреНрдХрд╛ ЁЯМ╜", key="crop_maize"):
                st.session_state.selected_crop = "maize"
                st.session_state.step = 3
                st.rerun()
        with col4:
            if st.button("рдХрдкрд╛рд╕ ЁЯз╡", key="crop_cotton"):
                st.session_state.selected_crop = "cotton"
                st.session_state.step = 3
                st.rerun()
        with col5:
            if st.button("рдЧрдиреНрдирд╛ ЁЯк┤", key="crop_sugarcane"):
                st.session_state.selected_crop = "sugarcane"
                st.session_state.step = 3
                st.rerun()
    else:
        st.error("рдореМрд╕рдо рдбреЗрдЯрд╛ рд▓рд╛рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред")
        if st.button("рд╡рд╛рдкрд╕ рдЬрд┐рд▓рд╛ рдЪреБрдиреЗрдВ тмЕя╕П", key="back_district"):
            st.session_state.step = 1
            st.rerun()

elif st.session_state.step == 3:
    st.header(f"ЁЯМ╛ {st.session_state.selected_crop} рдХреЗ рд▓рд┐рдП рдХреАрдЯрдирд╛рд╢рдХ рд╕реБрдЭрд╛рд╡ (рдореМрд╕рдо рдХреЛ рдзреНрдпрд╛рди рдореЗрдВ рд░рдЦрддреЗ рд╣реБрдП)")
    pesticide = get_pesticide_suggestion(st.session_state.selected_crop)
    st.markdown(f"**{st.session_state.selected_crop} рдХреЗ рд▓рд┐рдП рд╕реБрдЭрд╛рдпрд╛ рдХреАрдЯрдирд╛рд╢рдХ:**\n{pesticide}")
    st.markdown("*рдиреЛрдЯ: рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди рд╣рд▓реНрдХреЗ рд╣рд╛рд▓рд╛рдд рдореЗрдВ рд╕реНрдкреНрд░реЗ рдХреА рдпреЛрдЬрдирд╛ рд╕реБрдЭрд╛рддрд╛ рд╣реИред рд╕реНрдерд╛рдиреАрдп рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢ рдФрд░ рд╕реБрд░рдХреНрд╖рд╛ рдирд┐рд░реНрджреЗрд╢реЛрдВ рдХрд╛ рдкрд╛рд▓рди рдХрд░реЗрдВред*")
    if st.button("рдореВрд▓реНрдп рдЕрдкрдбреЗрдЯ рджреЗрдЦреЗрдВ ЁЯТ░", key="show_prices"):
        st.session_state.step = 4
        st.rerun()
    if st.button("рдирдИ рдмрд╛рддрдЪреАрдд рд╢реБрд░реВ рдХрд░реЗрдВ ЁЯФД", key="reset"):
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        st.session_state.step = 0
        st.rerun()

elif st.session_state.step == 4:
    st.header("ЁЯТ░ рдлрд╕рд▓ рдореВрд▓реНрдп рдЕрдкрдбреЗрдЯ (рд▓реБрдзрд┐рдпрд╛рдирд╛ рдХреНрд╖реЗрддреНрд░, рднрд╛рд░рдд-рд╡реНрдпрд╛рдкреА рддреБрд▓рдирд╛)")
    prices_msg = get_crop_prices_display(st.session_state.selected_crop)
    st.markdown(prices_msg)
    if st.button("рдирдИ рдмрд╛рддрдЪреАрдд рд╢реБрд░реВ рдХрд░реЗрдВ ЁЯФД", key="reset_prices"):
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        st.session_state.step = 0
        st.rerun()

# Sidebar for info (Hindi)
with st.sidebar:
    st.markdown("### рдЬрд╛рдирдХрд╛рд░реА")
    st.markdown("- **рдореМрд╕рдо рд╕реНрд░реЛрдд:** WeatherAPI (10-рджрд┐рди рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди)")
    st.markdown("- **рд╕рдорд░реНрдерд┐рдд рдлрд╕рд▓реЗрдВ:** рдЧреЗрд╣реВрдВ, рдЪрд╛рд╡рд▓, рдордХреНрдХрд╛, рдХрдкрд╛рд╕, рдЧрдиреНрдирд╛")
    st.markdown("- **рдореВрд▓реНрдп рд╕реНрд░реЛрдд:** Agmarknet (рд░рд╛рд╖реНрдЯреНрд░реАрдп рдФрд╕рддтАФрдХреЛрдб рдореЗрдВ рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ)")
    st.markdown("- **рдбрд┐рд╕реНрдХреНрд▓реЗрдорд░:** рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди/рдореВрд▓реНрдп рдЕрдиреБрдорд╛рдирд┐рдд; рд╕реБрдЭрд╛рд╡ рд╕рд╛рдорд╛рдиреНрдпред рд╡рд┐рд╢реЗрд╖рдЬреНрдЮреЛрдВ рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рд▓реЗрдВред")

# Footer (Hindi, with your email)
st.markdown("---")
st.markdown("*рд▓реБрдзрд┐рдпрд╛рдирд╛ рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП рдмрдирд╛рдпрд╛ рдЧрдпрд╛ред рдкреНрд░рд╢реНрди? рд╕рдВрдкрд░реНрдХ [prabuddhsharma2020@gmail.com](mailto:prabuddhsharma2020@gmail.com). ЁЯМ╛*")  # рдЕрдкрдирд╛ рдИрдореЗрд▓ рдпрд╣рд╛рдВ рдбрд╛рд▓реЗрдВ!

