import streamlit as st
import requests
from datetime import datetime

# --- Page Configuration (set this once at the top) ---
st.set_page_config(page_title="рдХрд┐рд╕рд╛рди рд╕рд▓рд╛рд╣", page_icon="ЁЯМ▒", layout="wide")

# --- IMPORTANT: API Key Management ---
# The code securely accesses your API key from Streamlit's secrets manager.
# You MUST create a file at .streamlit/secrets.toml and add your key there.
WEATHER_API_KEY = st.secrets.get("a471efb91f4c4e29ac9135831252209")

# --- Custom Styling (CSS) ---
def add_custom_css():
    st.markdown(f"""
    <style>
    /* General App Styling */
    .stApp {{
        background-image: url("https://images.pexels.com/photos/235922/pexels-photo-235922.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2");
        background-size: cover;
        background-attachment: fixed;
    }}

    /* Translucent Containers with Shadow */
    [data-testid="stSidebar"], [data-testid="stSidebar"] > div:first-child {{
        background: rgba(248, 249, 251, 0.85);
        backdrop-filter: blur(5px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        border-right: 1px solid rgba(0,0,0,0.1);
    }}
    .main .block-container {{
        background: rgba(255, 255, 255, 0.85);
        backdrop-filter: blur(5px);
        border-radius: 15px;
        padding: 2rem;
        box-shadow: 0 4px 20px rgba(0,0,0,0.15);
    }}

    /* --- Landing Page Specific Styles --- */
    .landing-page-container {{
        background: linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0.5)), url("https://images.pexels.com/photos/3889855/pexels-photo-3889855.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2"); /* NEW FARMER IMAGE */
        background-size: cover;
        background-position: center;
        position: fixed;
        top: 0; left: 0;
        width: 100%; height: 100%;
        display: flex; flex-direction: column;
        justify-content: center; align-items: center;
        text-align: center;
        color: white;
    }}
    .landing-page-container h1 {{
        font-size: 4.5rem;
        font-weight: 900;
        text-shadow: 3px 3px 10px rgba(0,0,0,0.8);
    }}
    .landing-page-container .stButton button {{
        background-color: #28a745; /* A vibrant green */
        color: white;
        font-size: 1.5rem;
        font-weight: bold;
        padding: 1rem 2.5rem;
        border-radius: 50px;
        border: none;
        box-shadow: 0 4px 15px rgba(0,0,0,0.4);
        transition: transform 0.2s, box-shadow 0.2s;
    }}
    .landing-page-container .stButton button:hover {{
        transform: scale(1.05);
        box-shadow: 0 6px 20px rgba(0,0,0,0.5);
    }}
    </style>
    """, unsafe_allow_html=True)

# --- Data Dictionaries ---
pesticide_suggestions = {
    "wheat": "рдлрдВрдЧреАрд╕рд╛рдЗрдб XYZ (рдЙрджрд╛рд╣рд░рдг: рдХрд╛рд░реНрдмреЗрдВрдбрд╛рдЬрд┐рдо) - рдЬрдВрдЧ рдФрд░ рд╕реНрдордЯ рд╕реЗ рд╕реБрд░рдХреНрд╖рд╛ред 2-3 рдЧреНрд░рд╛рдо/рд▓реАрдЯрд░ рдкрд╛рдиреА рдореЗрдВ рдорд┐рд▓рд╛рдХрд░ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВред рд▓рд╛рдЧрдд: тВ╣200-300/рдПрдХрдбрд╝ред",
    "rice": "рдХреАрдЯрдирд╛рд╢рдХ ABC (рдЙрджрд╛рд╣рд░рдг: рдЗрдорд┐рдбрд╛рдХреНрд▓реЛрдкреНрд░рд┐рдб) - рддрдирд╛ рдмреЛрд░рд░ рдФрд░ рдкрддреНрддреА рдлреЛрд▓реНрдбрд░ рдирд┐рдпрдВрддреНрд░рдгред 0.3 рдорд┐рд▓реА/рд▓реАрдЯрд░ рдкрд╛рдиреАред рд▓рд╛рдЧрдд: тВ╣150-250/рдПрдХрдбрд╝ред",
    "maize": "рдЦрд░рдкрддрд╡рд╛рд░рдирд╛рд╢рдХ DEF (рдЙрджрд╛рд╣рд░рдг: рдПрдЯреНрд░рд╛рдЬреАрди) - рдШрд╛рд╕ рдФрд░ рдЪреМрдбрд╝реА рдкрддреНрддреА рд╡рд╛рд▓реЗ рдЦрд░рдкрддрд╡рд╛рд░ рдкреНрд░рдмрдВрдзрдиред 1 рдХрд┐рд▓реЛ/рд╣реЗрдХреНрдЯреЗрдпрд░ред рд▓рд╛рдЧрдд: тВ╣300-400/рдПрдХрдбрд╝ред",
    "cotton": "рдХреАрдЯрдирд╛рд╢рдХ GHI (рдЙрджрд╛рд╣рд░рдг: рдПрдВрдбреЛрд╕рд▓реНрдлрд╛рди) - рдмреЛрд▓рд╡рд░реНрдо рдФрд░ рдПрдлрд┐рдбреНрд╕ рдкрд░ рдирд┐рд╢рд╛рдирд╛ред 1.5 рдорд┐рд▓реА/рд▓реАрдЯрд░ред рд▓рд╛рдЧрдд: тВ╣400-500/рдПрдХрдбрд╝ред",
    "sugarcane": "рдХреАрдЯрдирд╛рд╢рдХ JKL (рдЙрджрд╛рд╣рд░рдг: рдХреНрд▓реЛрд░рдкрд╛рдпрд░реАрдлреЙрд╕) - рдмреЛрд░рд░ рдФрд░ рджреАрдордХ рд╕реЗ рд▓рдбрд╝рд╛рдИред 2 рдорд┐рд▓реА/рд▓реАрдЯрд░ рдкрд╛рдиреАред рд▓рд╛рдЧрдд: тВ╣250-350/рдПрдХрдбрд╝ред",
}

states_districts = {
    "рдкрдВрдЬрд╛рдм": ["рд▓реБрдзрд┐рдпрд╛рдирд╛", "рдЕрдореГрддрд╕рд░", "рдЬрд╛рд▓рдВрдзрд░", "рдкрдЯрд┐рдпрд╛рд▓рд╛", "рдмрдард┐рдВрдбрд╛"],
    "рд╣рд░рд┐рдпрд╛рдгрд╛": ["рдХрд░рдирд╛рд▓", "рдЕрдВрдмрд╛рд▓рд╛", "рдХреБрд░реБрдХреНрд╖реЗрддреНрд░", "рд╕рд┐рд░рд╕рд╛", "рдлрд░реАрджрд╛рдмрд╛рдж"],
    "рд░рд╛рдЬрд╕реНрдерд╛рди": ["рдЬрдпрдкреБрд░", "рдЬреЛрдзрдкреБрд░", "рдЙрджрдпрдкреБрд░", "рдХреЛрдЯрд╛", "рдмреАрдХрд╛рдиреЗрд░"],
    "рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢": ["рд▓рдЦрдирдК", "рдХрд╛рдирдкреБрд░", "рдЖрдЧрд░рд╛", "рд╡рд╛рд░рд╛рдгрд╕реА", "рдореЗрд░рда"],
}

district_english_map = {
    "рд▓реБрдзрд┐рдпрд╛рдирд╛": "Ludhiana", "рдЕрдореГрддрд╕рд░": "Amritsar", "рдЬрд╛рд▓рдВрдзрд░": "Jalandhar", "рдкрдЯрд┐рдпрд╛рд▓рд╛": "Patiala", "рдмрдард┐рдВрдбрд╛": "Bathinda",
    "рдХрд░рдирд╛рд▓": "Karnal", "рдЕрдВрдмрд╛рд▓рд╛": "Ambala", "рдХреБрд░реБрдХреНрд╖реЗрддреНрд░": "Kurukshetra", "рд╕рд┐рд░рд╕рд╛": "Sirsa", "рдлрд░реАрджрд╛рдмрд╛рдж": "Faridabad",
    "рдЬрдпрдкреБрд░": "Jaipur", "рдЬреЛрдзрдкреБрд░": "Jodhpur", "рдЙрджрдпрдкреБрд░": "Udaipur", "рдХреЛрдЯрд╛": "Kota", "рдмреАрдХрд╛рдиреЗрд░": "Bikaner",
    "рд▓рдЦрдирдК": "Lucknow", "рдХрд╛рдирдкреБрд░": "Kanpur", "рдЖрдЧрд░рд╛": "Agra", "рд╡рд╛рд░рд╛рдгрд╕реА": "Varanasi", "рдореЗрд░рда": "Meerut",
}

crop_prices = {
    "wheat": {"modal_price": 2450, "min_price": 2400, "max_price": 2500, "avg_yield_quintal_per_acre": 20},
    "rice": {"modal_price": 2150, "min_price": 2100, "max_price": 2200, "avg_yield_quintal_per_acre": 25},
    "maize": {"modal_price": 1850, "min_price": 1800, "max_price": 1900, "avg_yield_quintal_per_acre": 18},
    "cotton": {"modal_price": 6700, "min_price": 6600, "max_price": 6800, "avg_yield_quintal_per_acre": 10},
    "sugarcane": {"modal_price": 360, "min_price": 350, "max_price": 370, "avg_yield_quintal_per_acre": 400},
}
crops_list = ["wheat", "rice", "maize", "cotton", "sugarcane"]

# --- Helper Functions ---
@st.cache_data(ttl=1800)
def get_10day_forecast(hindi_district):
    if not WEATHER_API_KEY:
        st.error("Weather API key not configured. Please add it to your secrets file.")
        return None
    english_district = district_english_map.get(hindi_district, hindi_district)
    url = f"http://api.weatherapi.com/v1/forecast.json?key={WEATHER_API_KEY}&q={english_district},India&days=10"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        forecast_list = []
        for day_data in data["forecast"]["forecastday"]:
            condition = day_data["day"]["condition"]["text"]
            emoji = "тШАя╕П" if "sunny" in condition.lower() else "ЁЯМдя╕П" if "cloudy" in condition.lower() else "ЁЯМзя╕П" if "rain" in condition.lower() else "тЫЕ"
            forecast_list.append({
                "date": day_data["date"], "max_temp": day_data["day"]["maxtemp_c"],
                "min_temp": day_data["day"]["mintemp_c"], "condition": condition, "emoji": emoji
            })
        return forecast_list
    except requests.exceptions.RequestException as e:
        st.error(f"рдореМрд╕рдо рдбреЗрдЯрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓: {e}")
        return None

def get_crop_revenue(user_crop):
    crop_data = crop_prices.get(user_crop.lower().strip())
    return crop_data["modal_price"] * crop_data["avg_yield_quintal_per_acre"] if crop_data else 0

# --- UI Rendering Functions ---
def render_sidebar():
    with st.sidebar:
        st.title("ЁЯМ▒ рдХрд┐рд╕рд╛рди рд╕рд▓рд╛рд╣")
        st.markdown("---")
        service_map = {"ЁЯПа рд╣реЛрдо": "home", "ЁЯМдя╕П рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди": "weather", "ЁЯЫбя╕П рдХреАрдЯрдирд╛рд╢рдХ рд╕рд▓рд╛рд╣": "pesticide", "ЁЯТ░ рдордВрдбреА рдореВрд▓реНрдп": "price", "ЁЯТ╣ рд▓рд╛рдн рдХреИрд▓рдХреБрд▓реЗрдЯрд░": "profit"}
        service = st.radio("рд╕реЗрд╡рд╛ рдЪреБрдиреЗрдВ:", list(service_map.keys()))
        st.session_state.selected_service = service_map[service]
        st.markdown("---")
        if st.session_state.selected_service in ["weather", "pesticide"]:
            st.session_state.selected_state = st.selectbox("рд░рд╛рдЬреНрдп:", list(states_districts.keys()))
            if st.session_state.selected_state:
                st.session_state.selected_district = st.selectbox("рдЬрд┐рд▓рд╛:", states_districts[st.session_state.selected_state])
        if st.session_state.selected_service in ["pesticide", "price", "profit"]:
             st.session_state.selected_crop = st.selectbox("рдлрд╕рд▓:", [c.capitalize() for c in crops_list])
        st.markdown("---")
        if st.button("тЖйя╕П рд╣реЛрдо рдкреЗрдЬ рдкрд░ рд▓реМрдЯреЗрдВ"):
            st.session_state.page = "landing"
            st.rerun()

def render_weather_page():
    st.header(f"ЁЯМдя╕П {st.session_state.get('selected_district', '...')} рдХреЗ рд▓рд┐рдП рдореМрд╕рдо рдХрд╛ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди")
    if st.session_state.get('selected_district'):
        with st.spinner("рдореМрд╕рдо рдбреЗрдЯрд╛ рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ..."):
            forecast = get_10day_forecast(st.session_state.selected_district)
        if forecast:
            for day in forecast:
                st.markdown(f"- **{day['date']}**: {day['emoji']} {day['max_temp']}┬░C / {day['min_temp']}┬░C | {day['condition']}")
            st.success("10-рджрд┐рди рдХрд╛ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд▓реЛрдб рд╣реЛ рдЧрдпрд╛ред")

# Other render functions remain largely the same, but simplified for clarity
def render_home_page(): st.header("ЁЯСЛ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!"); st.info("рдХреГрдкрдпрд╛ рдмрд╛рдИрдВ рдУрд░ рджрд┐рдП рдЧрдП рдореЗрдиреВ рд╕реЗ рдПрдХ рд╕реЗрд╡рд╛ рдЪреБрдиреЗрдВред")
def render_pesticide_page():
    st.header(f"ЁЯЫбя╕П {st.session_state.get('selected_crop', '...')} рдХреЗ рд▓рд┐рдП рдХреАрдЯрдирд╛рд╢рдХ рд╕рд▓рд╛рд╣")
    if st.session_state.get('selected_crop'): st.markdown(pesticide_suggestions.get(st.session_state.selected_crop.lower(), "рдХреЛрдИ рд╕рд▓рд╛рд╣ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВред"))
def render_price_page():
    st.header(f"ЁЯТ░ {st.session_state.get('selected_crop', '...')} рдХреЗ рд▓рд┐рдП рдордВрдбреА рдореВрд▓реНрдп")
    if st.session_state.get('selected_crop'):
        crop_lower = st.session_state.selected_crop.lower()
        price_data = crop_prices.get(crop_lower)
        if price_data:
            revenue = price_data['modal_price'] * price_data['avg_yield_quintal_per_acre']
            col1, col2, col3 = st.columns(3)
            col1.metric("рдиреНрдпреВрдирддрдо рдореВрд▓реНрдп", f"тВ╣{price_data['min_price']}", "рдкреНрд░рддрд┐ рдХреНрд╡рд┐рдВрдЯрд▓")
            col2.metric("рдореЛрдбрд▓ рдореВрд▓реНрдп", f"тВ╣{price_data['modal_price']}", "рдкреНрд░рддрд┐ рдХреНрд╡рд┐рдВрдЯрд▓")
            col3.metric("рдЕрдзрд┐рдХрддрдо рдореВрд▓реНрдп", f"тВ╣{price_data['max_price']}", "рдкреНрд░рддрд┐ рдХреНрд╡рд┐рдВрдЯрд▓")
            st.metric("рдЕрдиреБрдорд╛рдирд┐рдд рдЖрдп", f"тВ╣{revenue:,}", "рдкреНрд░рддрд┐ рдПрдХрдбрд╝")
def render_profit_page():
    st.header(f"ЁЯТ╣ {st.session_state.get('selected_crop', '...')} рдХреЗ рд▓рд┐рдП рд▓рд╛рдн рдХреИрд▓рдХреНрдпреВрд▓реЗрдЯрд░")
    if st.session_state.get('selected_crop'):
        revenue = get_crop_revenue(st.session_state.selected_crop.lower())
        cost = st.number_input("рдЦреЗрддреА рдХреА рдХреБрд▓ рд▓рд╛рдЧрдд рджрд░реНрдЬ рдХрд░реЗрдВ (тВ╣ рдкреНрд░рддрд┐ рдПрдХрдбрд╝)", min_value=0, step=500)
        profit = revenue - cost
        st.markdown("---")
        col1, col2, col3 = st.columns(3)
        col1.metric("рдЕрдиреБрдорд╛рдирд┐рдд рдЖрдп", f"тВ╣{revenue:,}", "рдкреНрд░рддрд┐ рдПрдХрдбрд╝"); col2.metric("рдЖрдкрдХреА рд▓рд╛рдЧрдд", f"тВ╣{cost:,}", "рдкреНрд░рддрд┐ рдПрдХрдбрд╝")
        col3.metric("рд╢реБрджреНрдз рд▓рд╛рдн/рдиреБрдХрд╕рд╛рди", f"тВ╣{profit:,}", "рд▓рд╛рдн" if profit >= 0 else "рдиреБрдХрд╕рд╛рди")

# --- Main App Logic with Page Routing ---
add_custom_css()
if "page" not in st.session_state: st.session_state.page = "landing"

if st.session_state.page == "landing":
    st.markdown('<div class="landing-page-container"><h1>рдХрд┐рд╕рд╛рди рд╕рд▓рд╛рд╣</h1><p>рдЖрдкрдХреА рдЦреЗрддреА, рдЖрдкрдХреА рддрд░рдХреНрдХреА</p></div>', unsafe_allow_html=True)
    if st.button("рдРрдк рдореЗрдВ рдкреНрд░рд╡реЗрд╢ рдХрд░реЗрдВ", key="enter_app"):
        st.session_state.page = "main_app"; st.rerun()
else:
    st.title("рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рд╕реЗрд╡рд╛рдПрдВ"); st.markdown("---")
    render_sidebar()
    service_pages = {"home": render_home_page, "weather": render_weather_page, "pesticide": render_pesticide_page, "price": render_price_page, "profit": render_profit_page}
    service_pages.get(st.session_state.get("selected_service", "home"), render_home_page)()

