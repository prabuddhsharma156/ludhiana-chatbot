import streamlit as st
import requests
from datetime import datetime

# Load API key from Streamlit Secrets (MUST SET REAL KEY for weather to work)
WEATHER_API_KEY = st.secrets.get("WEATHER_API_KEY", "YOUR_WEATHERAPI_KEY_HERE")

# Crop to pesticide mapping (Hindi descriptions)
pesticide_suggestions = {
    "wheat": "рдлрдВрдЧреАрд╕рд╛рдЗрдб XYZ (рдЙрджрд╛рд╣рд░рдг: рдХрд╛рд░реНрдмреЗрдВрдбрд╛рдЬрд┐рдо) - рдЬрдВрдЧ рдФрд░ рд╕реНрдордЯ рд╕реЗ рд╕реБрд░рдХреНрд╖рд╛ред",
    "rice": "рдХреАрдЯрдирд╛рд╢рдХ ABC (рдЙрджрд╛рд╣рд░рдг: рдЗрдорд┐рдбрд╛рдХреНрд▓реЛрдкреНрд░рд┐рдб) - рддрдирд╛ рдмреЛрд░рд░ рдФрд░ рдкрддреНрддреА рдлреЛрд▓реНрдбрд░ рдирд┐рдпрдВрддреНрд░рдгред",
    "maize": "рдЦрд░рдкрддрд╡рд╛рд░рдирд╛рд╢рдХ DEF (рдЙрджрд╛рд╣рд░рдг: рдПрдЯреНрд░рд╛рдЬреАрди) - рдШрд╛рд╕ рдФрд░ рдЪреМрдбрд╝реА рдкрддреНрддреА рд╡рд╛рд▓реЗ рдЦрд░рдкрддрд╡рд╛рд░ рдкреНрд░рдмрдВрдзрдиред",
    "cotton": "рдХреАрдЯрдирд╛рд╢рдХ GHI (рдЙрджрд╛рд╣рд░рдг: рдПрдВрдбреЛрд╕рд▓реНрдлрд╛рди) - рдмреЛрд▓рд╡рд░реНрдо рдФрд░ рдПрдлрд┐рдбреНрд╕ рдкрд░ рдирд┐рд╢рд╛рдирд╛ред",
    "sugarcane": "рдХреАрдЯрдирд╛рд╢рдХ JKL (рдЙрджрд╛рд╣рд░рдг: рдХреНрд▓реЛрд░рдкрд╛рдпрд░реАрдлреЙрд╕) - рдмреЛрд░рд░ рдФрд░ рджреАрдордХ рд╕реЗ рд▓рдбрд╝рд╛рдИред",
}

# All 28 Indian States with 4-5 major districts (Hindi for UI)
states_districts = {
    "рдЖрдВрдзреНрд░ рдкреНрд░рджреЗрд╢": ["рд╡рд┐рд╢рд╛рдЦрд╛рдкрддреНрддрдирдо", "рд╡рд┐рдЬрдпрд╡рд╛рдбрд╝рд╛", "рдЧреБрдВрдЯреВрд░", "рдХреБрд░рдиреВрд▓", "рдЕрдирдВрддрдкреБрд░"],
    "рдЕрд░реБрдгрд╛рдЪрд▓ рдкреНрд░рджреЗрд╢": ["рдЗрдЯрд╛рдирдЧрд░", "рддрд╡рд╛рдВрдЧ", "рдкрд╛рдкреБрдо рдкрд╛рд░реЗ", "рд▓реЛрд╣рд┐рдд"],
    "рдЕрд╕рдо": ["рдЧреБрд╡рд╛рд╣рд╛рдЯреА", "рдбрд┐рдмреНрд░реВрдЧрдврд╝", "рдЬреЛрд░рд╣рд╛рдЯ", "рд╕рд┐рд▓рдЪрд░", "рдХрд╛рдорд░реВрдк"],
    "рдмрд┐рд╣рд╛рд░": ["рдкрдЯрдирд╛", "рдЧрдпрд╛", "рднрд╛рдЧрд▓рдкреБрд░", "рдореБрдЬрдлреНрдлрд░рдкреБрд░", "рдкреВрд░реНрдгрд┐рдпрд╛"],
    "рдЫрддреНрддреАрд╕рдЧрдврд╝": ["рд░рд╛рдпрдкреБрд░", "рджреБрд░реНрдЧ", "рдмрд┐рд▓рд╛рд╕рдкреБрд░", "рд░рд╛рдпрдЧрдврд╝", "рдЬрд╛рдВрдЬрдЧреАрд░-рдЪрд╛рдВрдкрд╛"],
    "рдЧреЛрд╡рд╛": ["рдкрдгрдЬреА", "рдорд╛рд░реНрдЧрд╛рд╡", "рд╕рд╛рдЙрд╕ рдЧреЛрд╡рд╛", "рдиреЙрд░реНрде рдЧреЛрд╡рд╛"],
    "рдЧреБрдЬрд░рд╛рдд": ["рдЕрд╣рдорджрд╛рдмрд╛рдж", "рд╕реВрд░рдд", "рд╡рдбреЛрджрд░рд╛", "рд░рд╛рдЬрдХреЛрдЯ", "рднрд╛рд╡рдирдЧрд░"],
    "рд╣рд░рд┐рдпрд╛рдгрд╛": ["рдХрд░рдирд╛рд▓", "рдЕрдВрдмрд╛рд▓рд╛", "рдХреБрд░реБрдХреНрд╖реЗрддреНрд░", "рд╕рд┐рд░рд╕рд╛", "рдлрд░реАрджрд╛рдмрд╛рдж"],
    "рд╣рд┐рдорд╛рдЪрд▓ рдкреНрд░рджреЗрд╢": ["рд╢рд┐рдорд▓рд╛", "рдордВрдбреА", "рдХреБрд▓реНрд▓реВ", "рдХрд╛рдВрдЧрдбрд╝рд╛", "рд╕реЛрд▓рди"],
    "рдЭрд╛рд░рдЦрдВрдб": ["рд░рд╛рдВрдЪреА", "рдзрдирдмрд╛рдж", "рдЬрдорд╢реЗрджрдкреБрд░", "рдЧрд┐рд░рд┐рдбреАрд╣", "рд╣рдЬрд╛рд░реАрдмрд╛рдЧ"],
    "рдХрд░реНрдирд╛рдЯрдХ": ["рдмреЗрдВрдЧрд▓реБрд░реБ", "рдореИрд╕реВрд░", "рд╣реБрдмрд▓реА", "рдмреЗрд▓рдЧрд╛рдо", "рдордВрдЧрд▓реБрд░реБ"],
    "рдХреЗрд░рд▓": ["рддрд┐рд░реБрд╡рдирдВрддрдкреБрд░рдо", "рдХреЛрдЪреНрдЪрд┐", "рдХреЛрдЭрд┐рдХреЛрдб", "рддреНрд░рд┐рд╢реВрд░", "рдХреЛрдЯреНрдЯрд╛рдпрдо"],
    "рдордзреНрдп рдкреНрд░рджреЗрд╢": ["рднреЛрдкрд╛рд▓", "рдЗрдВрджреМрд░", "рдЧреНрд╡рд╛рд▓рд┐рдпрд░", "рдЬрдмрд▓рдкреБрд░", "рдЙрдЬреНрдЬреИрди"],
    "рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░": ["рдореБрдВрдмрдИ", "рдкреБрдгреЗ", "рдирд╛рдЧрдкреБрд░", "рдирд╛рд╕рд┐рдХ", "рдЕрдорд░рд╛рд╡рддреА"],
    "рдордгрд┐рдкреБрд░": ["рдЗрдореНрдлрд╛рд▓ рдкреВрд░реНрд╡", "рдЗрдореНрдлрд╛рд▓ рдкрд╢реНрдЪрд┐рдо", "рдмрд┐рд╢реНрдиреБрдкреБрд░", "рдереМрдмрд▓"],
    "рдореЗрдШрд╛рд▓рдп": ["рд╢рд┐рд▓рд╛рдВрдЧ", "рдИрд╕реНрдЯ рдЦрд╛рд╕реА рд╣рд┐рд▓реНрд╕", "рд╡реЗрд╕реНрдЯ рдЧрд╛рд░реЛ рд╣рд┐рд▓реНрд╕", "рдИрд╕реНрдЯ рдЧрд╛рд░реЛ рд╣рд┐рд▓реНрд╕"],
    "рдорд┐рдЬреЛрд░рдо": ["рдЖрдЗрдЬреЛрд▓", "рд▓реБрдВрдЧрд▓реЗрдИ", "рдЪрдореНрдлрд╛рдИ", "рдХреМрд▓рдХ"],
    "рдирд╛рдЧрд╛рд▓реИрдВрдб": ["рдХреЛрд╣рд┐рдорд╛", "рджрд┐рдорд╛рдкреБрд░", "рдореЛрдХреЛрдХрдЪреБрдВрдЧ", "рддреБрдХреЗрд╕рд╛рдВрдЧ"],
    "рдУрдбрд┐рд╢рд╛": ["рднреБрд╡рдиреЗрд╢реНрд╡рд░", "рдХрдЯрдХ", "рдмрд░рдореНрдкреБрд░", "рд░рд╛рдЙрд░рдХреЗрд▓рд╛", "рдмрд╛рд▓рд╛рд╕реЛрд░"],
    "рдкрдВрдЬрд╛рдм": ["рд▓реБрдзрд┐рдпрд╛рдирд╛", "рдЕрдореГрддрд╕рд░", "рдЬрд╛рд▓рдВрдзрд░", "рдкрдЯрд┐рдпрд╛рд▓рд╛", "рдмрдард┐рдВрдбрд╛"],
    "рд░рд╛рдЬрд╕реНрдерд╛рди": ["рдЬрдпрдкреБрд░", "рдЬреЛрдзрдкреБрд░", "рдЙрджрдпрдкреБрд░", "рдХреЛрдЯрд╛", "рдмреАрдХрд╛рдиреЗрд░"],
    "рд╕рд┐рдХреНрдХрд┐рдо": ["рдЧрдВрдЧрдЯреЛрдХ", "рдордВрдЧрди", "рдИрд╕реНрдЯ рд╕рд┐рдХреНрдХрд┐рдо", "рд╡реЗрд╕реНрдЯ рд╕рд┐рдХреНрдХрд┐рдо"],
    "рддрдорд┐рд▓рдирд╛рдбреБ": ["рдЪреЗрдиреНрдирдИ", "рдХреЛрдпрдВрдмрдЯреВрд░", "рдорджреБрд░реИ", "рддрд┐рд░реБрдЪрд┐рд░рд╛рдкрд▓реНрд▓реА", "рд╕рд▓реЗрдо"],
    "рддреЗрд▓рдВрдЧрд╛рдирд╛": ["рд╣реИрджрд░рд╛рдмрд╛рдж", "рд╡рд░рдВрдЧрд▓", "рдирд┐рдЬрд╛рдорд╛рдмрд╛рдж", "рдЦрдореНрдордо", "рдорд╣рдмреВрдмрдирдЧрд░"],
    "рддреНрд░рд┐рдкреБрд░рд╛": ["рдЕрдЧрд░рддрд▓рд╛", "рдЙрдирд╛рдХреЛрдЯреА", "рд╡реЗрд╕реНрдЯ рддреНрд░рд┐рдкреБрд░рд╛", "рд╕рд┐рдкрд╛рд╣рд┐рдЬрд╛рд▓рд╛"],
    "рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢": ["рд▓рдЦрдирдК", "рдХрд╛рдирдкреБрд░", "рдЖрдЧрд░рд╛", "рд╡рд╛рд░рд╛рдгрд╕реА", "рдореЗрд░рда"],
    "рдЙрддреНрддрд░рд╛рдЦрдВрдб": ["рджреЗрд╣рд░рд╛рджреВрди", "рд╣рд░рд┐рджреНрд╡рд╛рд░", "рдЙрдзрдо рд╕рд┐рдВрд╣ рдирдЧрд░", "рдиреИрдиреАрддрд╛рд▓"],
    "рдкрд╢реНрдЪрд┐рдо рдмрдВрдЧрд╛рд▓": ["рдХреЛрд▓рдХрд╛рддрд╛", "рд╣рд╛рд╡рдбрд╝рд╛", "рджрд░рдЬреАрд▓рд┐рдВрдЧ", "рдмрд░реНрдзрдорд╛рди", "рдорд╛рд▓рджрд╛"],
}

# Hindi District to English City Mapping (for Weather API - fixes wrong weather)
district_english_map = {
    # Punjab
    "рд▓реБрдзрд┐рдпрд╛рдирд╛": "Ludhiana",
    "рдЕрдореГрддрд╕рд░": "Amritsar",
    "рдЬрд╛рд▓рдВрдзрд░": "Jalandhar",
    "рдкрдЯрд┐рдпрд╛рд▓рд╛": "Patiala",
    "рдмрдард┐рдВрдбрд╛": "Bathinda",
    # Haryana
    "рдХрд░рдирд╛рд▓": "Karnal",
    "рдЕрдВрдмрд╛рд▓рд╛": "Ambala",
    "рдХреБрд░реБрдХреНрд╖реЗрддреНрд░": "Kurukshetra",
    "рд╕рд┐рд░рд╕рд╛": "Sirsa",
    "рдлрд░реАрджрд╛рдмрд╛рдж": "Faridabad",
    # Uttar Pradesh
    "рд▓рдЦрдирдК": "Lucknow",
    "рдХрд╛рдирдкреБрд░": "Kanpur",
    "рдЖрдЧрд░рд╛": "Agra",
    "рд╡рд╛рд░рд╛рдгрд╕реА": "Varanasi",
    "рдореЗрд░рда": "Meerut",
    # Maharashtra
    "рдореБрдВрдмрдИ": "Mumbai",
    "рдкреБрдгреЗ": "Pune",
    "рдирд╛рдЧрдкреБрд░": "Nagpur",
    "рдирд╛рд╕рд┐рдХ": "Nashik",
    "рдЕрдорд░рд╛рд╡рддреА": "Amravati",
    # Rajasthan
    "рдЬрдпрдкреБрд░": "Jaipur",
    "рдЬреЛрдзрдкреБрд░": "Jodhpur",
    "рдЙрджрдпрдкреБрд░": "Udaipur",
    "рдХреЛрдЯрд╛": "Kota",
    "рдмреАрдХрд╛рдиреЗрд░": "Bikaner",
    # Madhya Pradesh
    "рднреЛрдкрд╛рд▓": "Bhopal",
    "рдЗрдВрджреМрд░": "Indore",
    "рдЧреНрд╡рд╛рд▓рд┐рдпрд░": "Gwalior",
    "рдЬрдмрд▓рдкреБрд░": "Jabalpur",
    "рдЙрдЬреНрдЬреИрди": "Ujjain",
    # Gujarat
    "рдЕрд╣рдорджрд╛рдмрд╛рдж": "Ahmedabad",
    "рд╕реВрд░рдд": "Surat",
    "рд╡рдбреЛрджрд░рд╛": "Vadodara",
    "рд░рд╛рдЬрдХреЛрдЯ": "Rajkot",
    "рднрд╛рд╡рдирдЧрд░": "Bhavnagar",
    # Bihar
    "рдкрдЯрдирд╛": "Patna",
    "рдЧрдпрд╛": "Gaya",
    "рднрд╛рдЧрд▓рдкреБрд░": "Bhagalpur",
    "рдореБрдЬрдлреНрдлрд░рдкреБрд░": "Muzaffarpur",
    "рдкреВрд░реНрдгрд┐рдпрд╛": "Purnia",
    # Andhra Pradesh
    "рд╡рд┐рд╢рд╛рдЦрд╛рдкрддреНрддрдирдо": "Visakhapatnam",
    "рд╡рд┐рдЬрдпрд╡рд╛рдбрд╝рд╛": "Vijayawada",
    "рдЧреБрдВрдЯреВрд░": "Guntur",
    "рдХреБрд░рдиреВрд▓": "Kurnool",
    "рдЕрдирдВрддрдкреБрд░": "Anantapur",
    # Karnataka
    "рдмреЗрдВрдЧрд▓реБрд░реБ": "Bengaluru",
    "рдореИрд╕реВрд░": "Mysore",
    "рд╣реБрдмрд▓реА": "Hubli",
    "рдмреЗрд▓рдЧрд╛рдо": "Belgaum",
    "рдордВрдЧрд▓реБрд░реБ": "Mangalore",
    # Tamil Nadu
    "рдЪреЗрдиреНрдирдИ": "Chennai",
    "рдХреЛрдпрдВрдмрдЯреВрд░": "Coimbatore",
    "рдорджреБрд░реИ": "Madurai",
    "рддрд┐рд░реБрдЪрд┐рд░рд╛рдкрд▓реНрд▓реА": "Tiruchirappalli",
    "рд╕рд▓реЗрдо": "Salem",
    # Telangana
    "рд╣реИрджрд░рд╛рдмрд╛рдж": "Hyderabad",
    "рд╡рд░рдВрдЧрд▓": "Warangal",
    "рдирд┐рдЬрд╛рдорд╛рдмрд╛рдж": "Nizamabad",
    "рдЦрдореНрдордо": "Khammam",
    "рдорд╣рдмреВрдмрдирдЧрд░": "Mahbubnagar",
    # Add more as needed for other states (e.g., "рдХреЛрд▓рдХрд╛рддрд╛": "Kolkata")
    "рдХреЛрд▓рдХрд╛рддрд╛": "Kolkata",
    "рджреЗрд╣рд░рд╛рджреВрди": "Dehradun",
    "рд╢рд┐рдорд▓рд╛": "Shimla",
    "рд░рд╛рдВрдЪреА": "Ranchi",
    "рднреБрд╡рдиреЗрд╢реНрд╡рд░": "Bhubaneswar",
    # ... (extend for all if needed; fallback to Hindi if not mapped)
}

# Real crop prices (Oct 2024 national averages - static)
crop_prices = {
    "wheat": {"modal_price": 2450, "min_price": 2400, "max_price": 2500, "avg_yield_quintal_per_acre": 20},
    "rice": {"modal_price": 2150, "min_price": 2100, "max_price": 2200, "avg_yield_quintal_per_acre": 25},
    "maize": {"modal_price": 1850, "min_price": 1800, "max_price": 1900, "avg_yield_quintal_per_acre": 18},
    "cotton": {"modal_price": 6700, "min_price": 6600, "max_price": 6800, "avg_yield_quintal_per_acre": 10},
    "sugarcane": {"modal_price": 360, "min_price": 350, "max_price": 370, "avg_yield_quintal_per_acre": 400},
}

st.set_page_config(page_title="рдлрд╕рд▓ рд╕рд▓рд╛рд╣ рдЪреИрдЯрдмреЙрдЯ", page_icon="ЁЯМдя╕П", layout="centered")
st.title("ЁЯМдя╕П рднрд╛рд░рддреАрдп рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП рдореМрд╕рдо, рд╕рд▓рд╛рд╣ рдФрд░ рд▓рд╛рдн рдХреИрд▓рдХреБрд▓реЗрдЯрд░")
st.markdown("---")

# Session state
if "step" not in st.session_state:
    st.session_state.step = 0
if "selected_state" not in st.session_state:
    st.session_state.selected_state = ""
if "selected_district" not in st.session_state:
    st.session_state.selected_district = ""
if "selected_crop" not in st.session_state:
    st.session_state.selected_crop = ""
if "total_cost" not in st.session_state:
    st.session_state.total_cost = 0
if "revenue_estimate" not in st.session_state:
    st.session_state.revenue_estimate = 0

# Weather fetch function (with English mapping)
@st.cache_data(ttl=1800)
def get_10day_forecast(hindi_district):
    english_district = district_english_map.get(hindi_district, hindi_district)  # Map to English
    days = 10
    url = f"http://api.weatherapi.com/v1/forecast.json?key={WEATHER_API_KEY}&q={english_district},India&days={days}"
    if WEATHER_API_KEY == "YOUR_WEATHERAPI_KEY_HERE":
        return None  # Force error if key not set
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            forecast_list = []
            for i in range(days):
                day_data = data["forecast"]["forecastday"][i]
                date = day_data["date"]
                max_temp = day_data["day"]["maxtemp_c"]
                min_temp = day_data["day"]["mintemp_c"]
                avg_temp = day_data["day"]["avgtemp_c"]
                condition = day_data["day"]["condition"]["text"]
                emoji = "тШАя╕П" if "sunny" in condition.lower() else "ЁЯМдя╕П" if "cloudy" in condition.lower() else "ЁЯМзя╕П" if "rain" in condition.lower() else "тЫЕ"
                forecast_list.append({"date": date, "max_temp": max_temp, "min_temp": min_temp, "avg_temp": avg_temp, "condition": condition, "emoji": emoji})
            return forecast_list
        else:
            st.error(f"API рддреНрд░реБрдЯрд┐: {response.status_code}. рдХреБрдВрдЬреА рдЪреЗрдХ рдХрд░реЗрдВред")
            return None
    except Exception as e:
        st.error(f"рдореМрд╕рдо рдбреЗрдЯрд╛ рддреНрд░реБрдЯрд┐: {e}. API рдХреБрдВрдЬреА рд╕реЗрдЯ рдХрд░реЗрдВред")
        return None

# Pesticide suggestion
def get_pesticide_suggestion(crop):
    crop_lower = crop.lower().strip()
    return pesticide_suggestions.get(crop_lower, "рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╕реБрдЭрд╛рд╡ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВред рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рдкреВрдЫреЗрдВред")

# Prices display
def get_crop_prices_display(user_crop):
    crop_lower = user_crop.lower().strip()
    data = crop_prices.get(crop_lower, {})
    modal = data.get("modal_price", 0)
    yield_q = data.get("avg_yield_quintal_per_acre", 0)
    revenue = modal * yield_q
    table = f"**рдордВрдбреА рдореВрд▓реНрдп (тВ╣/рдХреНрд╡рд┐рдВрдЯрд▓, Oct 2024):** | рдлрд╕рд▓ | рдореЛрдбрд▓ | рд░реЗрдВрдЬ | рдЖрдп/рдПрдХрдбрд╝ |\n|------|------|------|----------|\n
