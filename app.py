import streamlit as st
import requests
from datetime import datetime

WEATHER_API_KEY = st.secrets.get("WEATHER_API_KEY", "YOUR_WEATHERAPI_KEY_HERE")

pesticide_suggestions = {
    "wheat": "рдлрдВрдЧреАрд╕рд╛рдЗрдб XYZ (рдЙрджрд╛рд╣рд░рдг: рдХрд╛рд░реНрдмреЗрдВрдбрд╛рдЬрд┐рдо) - рдЬрдВрдЧ рдФрд░ рд╕реНрдордЯ рд╕реЗ рд╕реБрд░рдХреНрд╖рд╛ред 2-3 рдЧреНрд░рд╛рдо/рд▓реАрдЯрд░ рдкрд╛рдиреА рдореЗрдВ рдорд┐рд▓рд╛рдХрд░ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВред рд▓рд╛рдЧрдд: тВ╣200-300/рдПрдХрдбрд╝ред",
    "rice": "рдХреАрдЯрдирд╛рд╢рдХ ABC (рдЙрджрд╛рд╣рд░рдг: рдЗрдорд┐рдбрд╛рдХреНрд▓реЛрдкреНрд░рд┐рдб) - рддрдирд╛ рдмреЛрд░рд░ рдФрд░ рдкрддреНрддреА рдлреЛрд▓реНрдбрд░ рдирд┐рдпрдВрддреНрд░рдгред 0.3 рдорд┐рд▓реА/рд▓реАрдЯрд░ рдкрд╛рдиреАред рд▓рд╛рдЧрдд: тВ╣150-250/рдПрдХрдбрд╝ред",
    "maize": "рдЦрд░рдкрддрд╡рд╛рд░рдирд╛рд╢рдХ DEF (рдЙрджрд╛рд╣рд░рдг: рдПрдЯреНрд░рд╛рдЬреАрди) - рдШрд╛рд╕ рдФрд░ рдЪреМрдбрд╝реА рдкрддреНрддреА рд╡рд╛рд▓реЗ рдЦрд░рдкрддрд╡рд╛рд░ рдкреНрд░рдмрдВрдзрдиред 1 рдХрд┐рд▓реЛ/рд╣реЗрдХреНрдЯреЗрдпрд░ред рд▓рд╛рдЧрдд: тВ╣300-400/рдПрдХрдбрд╝ред",
    "cotton": "рдХреАрдЯрдирд╛рд╢рдХ GHI (рдЙрджрд╛рд╣рд░рдг: рдПрдВрдбреЛрд╕рд▓реНрдлрд╛рди) - рдмреЛрд▓рд╡рд░реНрдо рдФрд░ рдПрдлрд┐рдбреНрд╕ рдкрд░ рдирд┐рд╢рд╛рдирд╛ред 1.5 рдорд┐рд▓реА/рд▓реАрдЯрд░ред рд▓рд╛рдЧрдд: тВ╣400-500/рдПрдХрдбрд╝ред",
    "sugarcane": "рдХреАрдЯрдирд╛рд╢рдХ JKL (рдЙрджрд╛рд╣рд░рдг: рдХреНрд▓реЛрд░рдкрд╛рдпрд░реАрдлреЙрд╕) - рдмреЛрд░рд░ рдФрд░ рджреАрдордХ рд╕реЗ рд▓рдбрд╝рд╛рдИред 2 рдорд┐рд▓реА/рд▓реАрдЯрд░ рдкрд╛рдиреАред рд▓рд╛рдЧрдд: тВ╣250-350/рдПрдХрдбрд╝ред",
}

states_districts = {
    "рдкрдВрдЬрд╛рдм": ["рд▓реБрдзрд┐рдпрд╛рдирд╛", "рдЕрдореГрддрд╕рд░", "рдЬрд╛рд▓рдВрдзрд░", "рдкрдЯрд┐рдпрд╛рд▓рд╛", "рдмрдард┐рдВрдбрд╛"],
    "рд╣рд░рд┐рдпрд╛рдгрд╛": ["рдХрд░рдирд╛рд▓", "рдЕрдВрдмрд╛рд▓рд╛", "рдХреБрд░реБрдХреНрд╖реЗрддреНрд░", "рд╕рд┐рд░рд╕рд╛", "рдлрд░реАрджрд╛рдмрд╛рдж"],
    "рд░рд╛рдЬрд╕реНрдерд╛рди": ["рдЬрдпрдкреБрд░", "рдЬреЛрдзрдкреБрд░", "рдЙрджрдпрдкреБрд░", "рдХреЛрдЯрд╛", "рдмреАрдХрд╛рдиреЗрд░"],
    "рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢": ["рд▓рдЦрдирдК", "рдХрд╛рдирдкреБрд░", "рдЖрдЧрд░рд╛", "рд╡рд╛рд░рд╛рдгрд╕реА", "рдореЗрд░рда"],
}

district_english_map = {
    "рд▓реБрдзрд┐рдпрд╛рдирд╛": "Ludhiana", "рдЕрдореГрддрд╕рд░": "Amritsar", "рдЬрд╛рд▓рдВрдзрд░": "Jalandhar", "рдкрдЯрд┐рдпрд╛рд▓рд╛": "Patiala", "рдмрдард┐рдВрдбрд╛": "Bathinda",
    "рдХрд░рдирд╛рд▓": "Karnal", "рдЕрдВрдмрд╛рд▓рд╛": "Ambala", "рдХреБрд░реБрдХреНрд╖реЗрддреНрд░": "Kurukshetra", "рд╕рд┐рд░рд╕рд╛": "Sirsa", "рдлрд░реАрджрд╛рдмрд╛рдж": "Faridabad",
    "рдЬрдпрдкреБрд░": "Jaipur", "рдЬреЛрдзрдкреБрд░": "Jodhpur", "рдЙрджрдпрдкреБрд░": "Udaipur", "рдХреЛрдЯрд╛": "Kota", "рдмреАрдХрд╛рдиреЗрд░": "Bikaner",
    "рд▓рдЦрдирдК": "Lucknow", "рдХрд╛рдирдкреБрд░": "Kanpur", "рдЖрдЧрд░рд╛": "Agra", "рд╡рд╛рд░рд╛рдгрд╕реА": "Varanasi", "рдореЗрд░рда": "Meerut",
}

crop_prices = {
    "wheat": {"modal_price": 2450, "min_price": 2400, "max_price": 2500, "avg_yield_quintal_per_acre": 20},
    "rice": {"modal_price": 2150, "min_price": 2100, "max_price": 2200, "avg_yield_quintal_per_acre": 25},
    "maize": {"modal_price": 1850, "min_price": 1800, "max_price": 1900, "avg_yield_quintal_per_acre": 18},
    "cotton": {"modal_price": 6700, "min_price": 6600, "max_price": 6800, "avg_yield_quintal_per_acre": 10},
    "sugarcane": {"modal_price": 360, "min_price": 350, "max_price": 370, "avg_yield_quintal_per_acre": 400},
}

st.set_page_config(page_title="рдлрд╕рд▓ рд╕рд▓рд╛рд╣ рдЪреИрдЯрдмреЙрдЯ", page_icon="ЁЯМдя╕П", layout="centered")
st.title("ЁЯМдя╕П рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП рд╕рд▓рд╛рд╣ рд╕реЗрд╡рд╛рдПрдВ")
st.markdown("---")

if "step" not in st.session_state:
    st.session_state.step = 0
if "selected_service" not in st.session_state:
    st.session_state.selected_service = ""
if "selected_state" not in st.session_state:
    st.session_state.selected_state = ""
if "selected_district" not in st.session_state:
    st.session_state.selected_district = ""
if "selected_crop" not in st.session_state:
    st.session_state.selected_crop = ""
if "total_cost" not in st.session_state:
    st.session_state.total_cost = 0
if "revenue_estimate" not in st.session_state:
    st.session_state.revenue_estimate = 0

@st.cache_data(ttl=1800)
def get_10day_forecast(hindi_district):
    english_district = district_english_map.get(hindi_district, hindi_district)
    days = 10
    url = f"http://api.weatherapi.com/v1/forecast.json?key={WEATHER_API_KEY}&q={english_district},India&days={days}"
    if WEATHER_API_KEY == "YOUR_WEATHERAPI_KEY_HERE":
        return None
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            forecast_list = []
            for i in range(days):
                day_data = data["forecast"]["forecastday"][i]
                date = day_data["date"]
                max_temp = day_data["day"]["maxtemp_c"]
                min_temp = day_data["day"]["mintemp_c"]
                condition = day_data["day"]["condition"]["text"]
                emoji = "тШАя╕П" if "sunny" in condition.lower() else "ЁЯМдя╕П" if "cloudy" in condition.lower() else "ЁЯМзя╕П" if "rain" in condition.lower() else "тЫЕ"
                forecast_list.append({"date": date, "max_temp": max_temp, "min_temp": min_temp, "condition": condition, "emoji": emoji})
            return forecast_list
        else:
            return None
    except Exception as e:
        st.error(f"рдореМрд╕рдо рддреНрд░реБрдЯрд┐: {e}. API рдХреБрдВрдЬреА рд╕реЗрдЯ рдХрд░реЗрдВред")
        return None

def get_pesticide_suggestion(crop):
    crop_lower = crop.lower().strip()
    return pesticide_suggestions.get(crop_lower, "рд╕рд▓рд╛рд╣ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВред рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рдкреВрдЫреЗрдВред")

def get_crop_prices_display(user_crop):
    table_lines = [
        f"**рдордВрдбреА рдореВрд▓реНрдп (тВ╣/рдХреНрд╡рд┐рдВрдЯрд▓) - {datetime.now().strftime('%Y-%m-%d')}**",
        "| рдлрд╕рд▓ | рдореЛрдбрд▓ | рд░реЗрдВрдЬ | рдЖрдп/рдПрдХрдбрд╝ |",
        "|------|------|------|---------|"
    ]
    revenue = 0
    crop_lower = user_crop.lower().strip()
    for crop, data in crop_prices.items():
        modal = data["modal_price"]
        min_max = f"{data['min_price']}-{data['max_price']}"
        yield_q = data["avg_yield_quintal_per_acre"]
        rev = modal * yield_q
        table_lines.append(f"| {crop.capitalize()} | {modal} | {min_max} | {rev:,} |")
        if crop_lower == crop:
            revenue = rev
    table = "\n".join(table_lines)
    msg = f"{table}\n\n**{user_crop} рдЖрдп:** тВ╣{revenue:,}/рдПрдХрдбрд╝ (рдЙрдкрдЬ: {crop_prices.get(crop_lower, {}).get('avg_yield_quintal_per_acre', 0)} рдХреНрд╡рд┐рдВрдЯрд▓)ред *Agmarknet рд╕реЗред*"
    return msg, revenue

def calculate_profit(revenue, cost, crop):
    if cost > 0:
        profit = revenue - cost
        emoji = "ЁЯТ░" if profit > 0 else "тЪая╕П"
        return f"{emoji} **{crop} рд▓рд╛рдн:**\n- рдЖрдп: тВ╣{revenue:,}\n- рд▓рд╛рдЧрдд: тВ╣{cost:,}\n- **рд▓рд╛рдн: тВ╣{profit:,}/рдПрдХрдбрд╝**\n*рдЯрд┐рдк: рд▓рд╛рдЧрдд рдореЗрдВ рдмреАрдЬ, рдЦрд╛рдж, рдордЬрджреВрд░реА рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВред*"
    return f"**{crop} рдЖрдп:** тВ╣{revenue:,}/рдПрдХрдбрд╝ред рд▓рд╛рдЧрдд рдбрд╛рд▓реЗрдВред"

if st.session_state.step == 0:
    st.header("рдХреГрдкрдпрд╛ рд╕реЗрд╡рд╛ рдЪреБрдиреЗрдВ")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди ЁЯМдя╕П"):
            st.session_state.selected_service = "weather"
            st.session_state.step = 1
            st.rerun()
        if st.button("рдХреАрдЯрдирд╛рд╢рдХ рд╕рд▓рд╛рд╣ ЁЯЫбя╕П"):
            st.session_state.selected_service = "pesticide"
            st.session_state.step = 1
            st.rerun()
    with col2:
        if st.button("рдордВрдбреА рдореВрд▓реНрдп ЁЯТ░"):
            st.session_state.selected_service = "price"
            st.session_state.step = 3
            st.rerun()
        if st.button("рд▓рд╛рдн рдХреИрд▓рдХреБрд▓реЗрдЯрд░ ЁЯТ╣"):
            st.session_state.selected_service = "profit"
            st.session_state.step = 3
            st.rerun()
    if st.button("рд░реАрд╕реЗрдЯ ЁЯФД"):
        for k in list(st.session_state.keys()):
            del st.session_state[k]
        st.session_state.step = 0
        st.rerun()

elif st.session_state.step == 1:
    st.header("ЁЯМН рд░рд╛рдЬреНрдп рдЪреБрдиреЗрдВ (рд╕реНрдерд╛рди-рдЖрдзрд╛рд░рд┐рдд рд╕реЗрд╡рд╛ рдХреЗ рд▓рд┐рдП)")
    state = st.selectbox("рд░рд╛рдЬреНрдп:", list(states_districts.keys()))
    col1, col2 = st.columns(2)
    with col1:
        if st.button("рдЪреБрдиреЗрдВ ЁЯСЖ"):
            st.session_state.selected_state = state
            st.session_state.step = 2
            st.rerun()
    with col2:
        if st.button("рд╡рд╛рдкрд╕ рд╕реЗрд╡рд╛рдПрдВ тмЕя╕П"):
            st.session_state.step = 0
            st.rerun()

elif st.session_state.step == 2:
    st.header(f"ЁЯУН {st.session_state.selected_state} рдореЗрдВ рдЬрд┐рд▓рд╛ рдЪреБрдиреЗрдВ")
    district = st.selectbox("рдЬрд┐рд▓рд╛:", states_districts[st.session_state.selected_state])
    col1, col2 = st.columns(2)
    with col1:
        if st.button("рдЪреБрдиреЗрдВ ЁЯСЖ"):
            st.session_state.selected_district = district
            if st.session_state.selected_service == "weather":
                st.session_state.step = 4
            elif st.session_state.selected_service == "pesticide":
                st.session_state.step = 3
            st.rerun()
    with col2:
        if st.button("рд╡рд╛рдкрд╕ рд░рд╛рдЬреНрдп тмЕя╕П"):
            st.session_state.step = 1
            st.rerun()

elif st.session_state.step == 3:
    st.header("ЁЯМ╛ рдлрд╕рд▓ рдЪреБрдиреЗрдВ")
    cols = st.columns(5)
    crops = ["wheat", "rice", "maize", "cotton", "sugarcane"]
    crop_names = ["рдЧреЗрд╣реВрдВ ЁЯМ╛", "рдЪрд╛рд╡рд▓ ЁЯМ╛", "рдордХреНрдХрд╛ ЁЯМ╜", "рдХрдкрд╛рд╕ ЁЯз╡", "рдЧрдиреНрдирд╛ ЁЯк┤"]
    for i, (crop, name) in enumerate(zip(crops, crop_names)):
        with cols[i]:
            if st.button(name, key=f"crop_{crop}"):
                st.session_state.selected_crop = crop
                if st.session_state.selected_service == "pesticide":
                    st.session_state.step = 5
                elif st.session_state.selected_service == "price":
                    st.session_state.step = 6
                elif st.session_state.selected_service == "profit":
                    st.session_state.step = 7
                st.rerun()
    if st.button("рд╡рд╛рдкрд╕ тмЕя╕П"):
        if st.session_state.selected_service in ["weather", "pesticide"]:
            st.session_state.step = 2
        else:
            st.session_state.step = 0
        st.rerun()

elif st.session_state.step == 4:
    st.header(f"ЁЯМдя╕П {st.session_state.selected_district} рдХрд╛ 10-рджрд┐рди рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди")
    forecast = get_10day_forecast(st.session_state.selected_district)
    if forecast:
        for day in forecast:
            st.markdown(f"- **{day['date']}** {day['emoji']}: {day['max_temp']}┬░C / {day['min_temp']}┬░C | {day['condition']}")
        st.success("рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди рд▓реЛрдб рд╣реЛ рдЧрдпрд╛!")
    else:
        st.error("рдореМрд╕рдо рдбреЗрдЯрд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВред API рдХреБрдВрдЬреА рд╕реЗрдЯ рдХрд░реЗрдВред")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("рд╡рд╛рдкрд╕ рдЬрд┐рд▓рд╛ тмЕя╕П"):
            st.session_state.step = 2
            st.rerun()
    with col2:
        if st.button("рд░реАрд╕реЗрдЯ ЁЯФД"):
            for k in list(st.session_state.keys()):
                del st.session_state[k]
            st.session_state.step = 0
            st.rerun()

elif st.session_state.step == 5:
    st.header(f"ЁЯЫбя╕П {st.session_state.selected_crop} рдХреЗ рд▓рд┐рдП рдХреАрдЯрдирд╛рд╢рдХ рд╕рд▓рд╛рд╣")
    st.markdown(get_pesticide_suggestion(st.session_state.selected_crop))
    col1, col2 = st.columns(2)
    with col1:
        if st.button("рд╡рд╛рдкрд╕ рдлрд╕рд▓ тмЕя╕П"):
            st.session_state.step = 3
            st.rerun()
    with col2:
        if st.button("рд░реАрд╕реЗрдЯ ЁЯФД"):
            for k in list(st.session_state.keys()):
                del st.session_state[k]
            st.session_state.step = 0
            st.rerun()

elif st.session_state.step == 6:
    st.header(f"ЁЯТ░ {st.session_state.selected_crop} рдХреЗ рд▓рд┐рдП рдордВрдбреА рдореВрд▓реНрдп")
    msg, rev = get_crop_prices_display(st.session_state.selected_crop)
    st.markdown(msg)
    st.session_state.revenue_estimate = rev
    col1, col2 = st.columns(2)
    with col1:
        if st.button("рд╡рд╛рдкрд╕ рдлрд╕рд▓ тмЕя╕П"):
            st.session_state.step = 3
            st.rerun()
    with col2:
        if st.button("рд░реАрд╕реЗрдЯ ЁЯФД"):
            for k in list(st.session_state.keys()):
                del st.session_state[k]
            st.session_state.step = 0
            st.rerun()

elif st.session_state.step == 7:
    st.header(f"ЁЯТ╣ {st.session_state.selected_crop} рд▓рд╛рдн рдХреИрд▓рдХреБрд▓реЗрдЯрд░")
    if st.session_state.revenue_estimate == 0:
        _, st.session_state.revenue_estimate = get_crop_prices_display(st.session_state.selected_crop)
    cost = st.number_input("рдХреБрд▓ рд▓рд╛рдЧрдд (тВ╣/рдПрдХрдбрд╝):", min_value=0.0, value=0.0, step=1000.0)
    st.session_state.total_cost = cost
    if st.button("рдХреИрд▓рдХреБрд▓реЗрдЯ рдХрд░реЗрдВ"):
        profit_msg = calculate_profit(st.session_state.revenue_estimate, cost, st.session_state.selected_crop)
        st.markdown(profit_msg)
    col1, col2 = st.columns(2)
    with col1:
        if st.button("рд╡рд╛рдкрд╕ рдлрд╕рд▓ тмЕя╕П"):
            st.session
