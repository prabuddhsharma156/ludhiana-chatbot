import streamlit as st
import requests
from datetime import datetime

# Load API key from Streamlit Secrets (set real key for weather predictions)
WEATHER_API_KEY = st.secrets.get("WEATHER_API_KEY", "YOUR_WEATHERAPI_KEY_HERE")

# Pesticide suggestions (Hindi info for 5 crops)
pesticide_suggestions = {
    "wheat": "рдлрдВрдЧреАрд╕рд╛рдЗрдб XYZ (рдЙрджрд╛рд╣рд░рдг: рдХрд╛рд░реНрдмреЗрдВрдбрд╛рдЬрд┐рдо) - рдЬрдВрдЧ рдФрд░ рд╕реНрдордЯ рд╕реЗ рд╕реБрд░рдХреНрд╖рд╛ред 2-3 рдЧреНрд░рд╛рдо/рд▓реАрдЯрд░ рдкрд╛рдиреА рдореЗрдВ рдорд┐рд▓рд╛рдХрд░ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВред",
    "rice": "рдХреАрдЯрдирд╛рд╢рдХ ABC (рдЙрджрд╛рд╣рд░рдг: рдЗрдорд┐рдбрд╛рдХреНрд▓реЛрдкреНрд░рд┐рдб) - рддрдирд╛ рдмреЛрд░рд░ рдФрд░ рдкрддреНрддреА рдлреЛрд▓реНрдбрд░ рдирд┐рдпрдВрддреНрд░рдгред 0.3 рдорд┐рд▓реА/рд▓реАрдЯрд░ рдкрд╛рдиреАред",
    "maize": "рдЦрд░рдкрддрд╡рд╛рд░рдирд╛рд╢рдХ DEF (рдЙрджрд╛рд╣рд░рдг: рдПрдЯреНрд░рд╛рдЬреАрди) - рдШрд╛рд╕ рдФрд░ рдЪреМрдбрд╝реА рдкрддреНрддреА рд╡рд╛рд▓реЗ рдЦрд░рдкрддрд╡рд╛рд░ рдкреНрд░рдмрдВрдзрдиред 1 рдХрд┐рд▓реЛ/рд╣реЗрдХреНрдЯреЗрдпрд░ред",
    "cotton": "рдХреАрдЯрдирд╛рд╢рдХ GHI (рдЙрджрд╛рд╣рд░рдг: рдПрдВрдбреЛрд╕рд▓реНрдлрд╛рди) - рдмреЛрд▓рд╡рд░реНрдо рдФрд░ рдПрдлрд┐рдбреНрд╕ рдкрд░ рдирд┐рд╢рд╛рдирд╛ред 1.5 рдорд┐рд▓реА/рд▓реАрдЯрд░ред",
    "sugarcane": "рдХреАрдЯрдирд╛рд╢рдХ JKL (рдЙрджрд╛рд╣рд░рдг: рдХреНрд▓реЛрд░рдкрд╛рдпрд░реАрдлреЙрд╕) - рдмреЛрд░рд░ рдФрд░ рджреАрдордХ рд╕реЗ рд▓рдбрд╝рд╛рдИред 2 рдорд┐рд▓реА/рд▓реАрдЯрд░ рдкрд╛рдиреАред",
}

# 4 States with 5 districts each (Hindi for UI, agri-focused, includes Ludhiana)
states_districts = {
    "рдкрдВрдЬрд╛рдм": ["рд▓реБрдзрд┐рдпрд╛рдирд╛", "рдЕрдореГрддрд╕рд░", "рдЬрд╛рд▓рдВрдзрд░", "рдкрдЯрд┐рдпрд╛рд▓рд╛", "рдмрдард┐рдВрдбрд╛"],
    "рд╣рд░рд┐рдпрд╛рдгрд╛": ["рдХрд░рдирд╛рд▓", "рдЕрдВрдмрд╛рд▓рд╛", "рдХреБрд░реБрдХреНрд╖реЗрддреНрд░", "рд╕рд┐рд░рд╕рд╛", "рдлрд░реАрджрд╛рдмрд╛рдж"],
    "рд░рд╛рдЬрд╕реНрдерд╛рди": ["рдЬрдпрдкреБрд░", "рдЬреЛрдзрдкреБрд░", "рдЙрджрдпрдкреБрд░", "рдХреЛрдЯрд╛", "рдмреАрдХрд╛рдиреЗрд░"],
    "рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢": ["рд▓рдЦрдирдК", "рдХрд╛рдирдкреБрд░", "рдЖрдЧрд░рд╛", "рд╡рд╛рд░рд╛рдгрд╕реА", "рдореЗрд░рда"],
}

# Hindi to English district mapping (for accurate weather API)
district_english_map = {
    "рд▓реБрдзрд┐рдпрд╛рдирд╛": "Ludhiana", "рдЕрдореГрддрд╕рд░": "Amritsar", "рдЬрд╛рд▓рдВрдзрд░": "Jalandhar", "рдкрдЯрд┐рдпрд╛рд▓рд╛": "Patiala", "рдмрдард┐рдВрдбрд╛": "Bathinda",
    "рдХрд░рдирд╛рд▓": "Karnal", "рдЕрдВрдмрд╛рд▓рд╛": "Ambala", "рдХреБрд░реБрдХреНрд╖реЗрддреНрд░": "Kurukshetra", "рд╕рд┐рд░рд╕рд╛": "Sirsa", "рдлрд░реАрджрд╛рдмрд╛рдж": "Faridabad",
    "рдЬрдпрдкреБрд░": "Jaipur", "рдЬреЛрдзрдкреБрд░": "Jodhpur", "рдЙрджрдпрдкреБрд░": "Udaipur", "рдХреЛрдЯрд╛": "Kota", "рдмреАрдХрд╛рдиреЗрд░": "Bikaner",
    "рд▓рдЦрдирдК": "Lucknow", "рдХрд╛рдирдкреБрд░": "Kanpur", "рдЖрдЧрд░рд╛": "Agra", "рд╡рд╛рд░рд╛рдгрд╕реА": "Varanasi", "рдореЗрд░рда": "Meerut",
}

# Real crop prices (Oct 2024 national averages, тВ╣/quintal)
crop_prices = {
    "wheat": {"modal_price": 2450, "min_price": 2400, "max_price": 2500, "avg_yield_quintal_per_acre": 20},
    "rice": {"modal_price": 2150, "min_price": 2100, "max_price": 2200, "avg_yield_quintal_per_acre": 25},
    "maize": {"modal_price": 1850, "min_price": 1800, "max_price": 1900, "avg_yield_quintal_per_acre": 18},
    "cotton": {"modal_price": 6700, "min_price": 6600, "max_price": 6800, "avg_yield_quintal_per_acre": 10},
    "sugarcane": {"modal_price": 360, "min_price": 350, "max_price": 370, "avg_yield_quintal_per_acre": 400},
}

# App config
st.set_page_config(page_title="рдлрд╕рд▓ рд╕рд▓рд╛рд╣ рдЪреИрдЯрдмреЙрдЯ", page_icon="ЁЯМдя╕П", layout="centered")
st.title("ЁЯМдя╕П рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП рдореМрд╕рдо, рджрд╡рд╛, рдореВрд▓реНрдп рдФрд░ рд▓рд╛рдн рдХреИрд▓рдХреБрд▓реЗрдЯрд░")
st.markdown("---")

# Session state
if "step" not in st.session_state:
    st.session_state.step = 0  # 0: State, 1: District, 2: Weather, 3: Crop, 4: Pesticide, 5: Prices, 6: Profit
if "selected_state" not in st.session_state:
    st.session_state.selected_state = ""
if "selected_district" not in st.session_state:
    st.session_state.selected_district = ""
if "selected_crop" not in st.session_state:
    st.session_state.selected_crop = ""
if "total_cost" not in st.session_state:
    st.session_state.total_cost = 0
if "revenue_estimate" not in st.session_state:
    st.session_state.revenue_estimate = 0

# Weather function (10-day prediction)
@st.cache_data(ttl=1800)
def get_10day_forecast(hindi_district):
    english_district = district_english_map.get(hindi_district, hindi_district)
    days = 10
    url = f"http://api.weatherapi.com/v1/forecast.json?key={WEATHER_API_KEY}&q={english_district},India&days={days}"
    if WEATHER_API_KEY == "YOUR_WEATHERAPI_KEY_HERE":
        return None
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            forecast_list = []
            for i in range(days):
                day_data = data["forecast"]["forecastday"][i]
                date = day_data["date"]
                max_temp = day_data["day"]["maxtemp_c"]
                min_temp = day_data["day"]["mintemp_c"]
                avg_temp = day_data["day"]["avgtemp_c"]
                condition = day_data["day"]["condition"]["text"]
                emoji = "тШАя╕П" if "sunny" in condition.lower() else "ЁЯМдя╕П" if "cloudy" in condition.lower() else "ЁЯМзя╕П" if "rain" in condition.lower() else "тЫЕ"
                forecast_list.append({"date": date, "max_temp": max_temp, "min_temp": min_temp, "avg_temp": avg_temp, "condition": condition, "emoji": emoji})
            return forecast_list
        else:
            return None
    except Exception as e:
        st.error(f"рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди рддреНрд░реБрдЯрд┐: {e}. API рдХреБрдВрдЬреА рд╕реЗрдЯ рдХрд░реЗрдВред")
        return None

# Pesticide suggestion
def get_pesticide_suggestion(crop):
    crop_lower = crop.lower().strip()
    return pesticide_suggestions.get(crop_lower, "рдЗрд╕ рдлрд╕рд▓ рдХреЗ рд▓рд┐рдП рд╕реБрдЭрд╛рд╡ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВред рд╕реНрдерд╛рдиреАрдп рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред")

# Prices display with table
def get_crop_prices_display(user_crop):
    table_lines = [
        f"**рд░рд╛рд╖реНрдЯреНрд░реАрдп рдордВрдбреА рдореВрд▓реНрдп (тВ╣/рдХреНрд╡рд┐рдВрдЯрд▓) - рдЕрдкрдбреЗрдЯ: {datetime.now().strftime('%Y-%m-%d')}**",
        "| рдлрд╕рд▓ | рдореЛрдбрд▓ рдореВрд▓реНрдп | рдиреНрдпреВрди-рдЕрдзрд┐рдХрддрдо | рдЕрдиреБрдорд╛рдирд┐рдд рдЖрдп/рдПрдХрдбрд╝ (тВ╣) |",
        "|------|-------------|-------------|-----------------------|"
    ]
    total_revenue_estimate = 0
    crop_lower = user_crop.lower().strip()
    for crop, data in crop_prices.items():
        modal = data["modal_price"]
        min_max = f"{data['min_price']}-{data['max_price']}"
        yield_q = data["avg_yield_quintal_per_acre"]
        revenue = modal * yield_q
        table_lines.append(f"| {crop.capitalize()} | {modal} | {min_max} | {revenue:,} |")
        if crop_lower == crop:
            total_revenue_estimate = revenue
    table = "\n".join(table_lines)
    msg = f"{table}\n\n**рдЖрдкрдХреА рдлрд╕рд▓ ({user_crop}) рдХреЗ рд▓рд┐рдП рдЕрдиреБрдорд╛рдирд┐рдд рдЖрдп:** тВ╣{total_revenue_estimate:,}/рдПрдХрдбрд╝ (рдФрд╕рдд рдЙрдкрдЬ {crop_prices.get(crop_lower, {}).get('avg_yield_quintal_per_acre', 0)} рдХреНрд╡рд┐рдВрдЯрд▓/рдПрдХрдбрд╝)ред\n\n*рдиреЛрдЯ: Agmarknet рд╕реЗ рдФрд╕рддред рд╕реНрдерд╛рдиреАрдп рдордВрдбреА рдЪреЗрдХ рдХрд░реЗрдВред*"
    return msg, total_revenue_estimate

# Profit calculator
def calculate_profit(revenue, total_cost, crop):
    if total_cost > 0:
        profit = revenue - total_cost
        emoji = "ЁЯТ░" if profit > 0 else "тЪая╕П" if profit == 0 else "ЁЯУЙ"
        return f"{emoji} **{crop} рдХреЗ рд▓рд┐рдП рд▓рд╛рдн рдХреИрд▓рдХреБрд▓реЗрд╢рди:**\n- рдЕрдиреБрдорд╛рдирд┐рдд рдЖрдп: тВ╣{revenue:,}/рдПрдХрдбрд╝\n- рдХреБрд▓ рд▓рд╛рдЧрдд (рдЖрдкрдХреА): тВ╣{total_cost:,}/рдПрдХрдбрд╝\n- **рд╢реБрджреНрдз рд▓рд╛рдн: тВ╣{profit:,}/рдПрдХрдбрд╝**\n\n*рдЯрд┐рдк: рд╕рд╛рдорд╛рдиреНрдп рд▓рд╛рдЧрдд - рдЧреЗрд╣реВрдВ: тВ╣15,000-25,000/рдПрдХрдбрд╝ (рдмреАрдЬ, рдЦрд╛рдж, рдордЬрджреВрд░реА)ред*"
    else:
        return f"**{crop} рдХреЗ рд▓рд┐рдП рдЖрдп:** тВ╣{revenue:,}/рдПрдХрдбрд╝ред рд▓рд╛рдЧрдд рдбрд╛рд▓реЗрдВ рдФрд░ рдХреИрд▓рдХреБрд▓реЗрдЯ рдХрд░реЗрдВ!\n\n*рдЯрд┐рдк: рдХреБрд▓ рд▓рд╛рдЧрдд (рдмреАрдЬ + рд╢реНрд░рдо + рдЕрдиреНрдп) рдбрд╛рд▓реЗрдВ (тВ╣ рдореЗрдВ)ред*"

# Main app logic (steps)
if st.session_state.step == 0:
    st.header("ЁЯМН рд░рд╛рдЬреНрдп рдЪреБрдиреЗрдВ")
    selected_state = st.selectbox("рд░рд╛рдЬреНрдп:", list(states_districts.keys()))
    col1, col2 = st.columns(2)
    with col1:
        if st.button("рд░рд╛рдЬреНрдп рдЪреБрдиреЗрдВ ЁЯСЖ", key="select_state"):
            st.session_state.selected_state = selected_state
            st.session_state.step = 1
            st.rerun()
    with col2:
        if st.button("рд░реАрд╕реЗрдЯ ЁЯФД", key="reset"):
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.session_state.step = 0
            st.rerun()

elif st.session_state.step == 1:
    st.header(f"ЁЯУН {st.session_state.selected_state} рдореЗрдВ рдЬрд┐рд▓рд╛ рдЪреБрдиреЗрдВ")
    districts = states_districts.get(st.session_state.selected_state, [])
    selected_district = st.selectbox("рдЬрд┐рд▓рд╛:", districts)
    col1, col2 = st.columns(2)
    with col1:
        if st.button("рдЬрд┐рд▓рд╛ рдЪреБрдиреЗрдВ ЁЯСЖ", key="select_district"):
            st.session_state.selected_district = selected_district
            st.session_state.step = 2
            st.rerun()
    with col2:
        if st.button("рд╡рд╛рдкрд╕ рд░рд╛рдЬреНрдп тмЕя╕П", key="back_state"):
            st.session_state.step = 0
            st.rerun()

elif st.session_state.step == 2:
    st.header(f"ЁЯМдя╕П {st.session_state.selected_district} рдХрд╛ 10-рджрд┐рди рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди")
    forecast_data = get_10day_forecast(st.session_state.selected_district)
    if forecast_data:
        st.markdown("**10-рджрд┐рди рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди:**")
        for day in forecast_data:
            st.markdown(f"- **{day['date']}** {day['emoji']}: рдЕрдзрд┐рдХрддрдо {day['max_temp']}┬░C / рдиреНрдпреВрдирддрдо {day['min_temp']}┬░C | {day['condition']}")
        st.success("рдореМрд╕рдо рд▓реЛрдб рд╣реЛ рдЧрдпрд╛! рдЕрдм рдлрд╕рд▓ рдЪреБрдиреЗрдВред")
    else:
        st.error("рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди рд▓рд╛рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред API рдХреБрдВрдЬреА рд╕реЗрдЯ рдХрд░реЗрдВ рдпрд╛ рдмрд┐рдирд╛ рдореМрд╕рдо рдХреЗ рдЬрд╛рд░реА рд░рдЦреЗрдВред")
        if st.button("рдмрд┐рдирд╛ рдореМрд╕рдо рдХреЗ рдЬрд╛рд░реА рд░рдЦреЗрдВ тЮбя╕П", key="skip_weather"):
            st.session_state.step = 3
            st.rerun()
    # Crop buttons (5 columns)
    col1, col2, col3, col4, col5 = st.columns(5)
    with col1:
        if st.button("рдЧреЗрд╣реВрдВ ЁЯМ╛", key="crop_wheat"):
            st.session_state.selected_crop = "wheat"
            st.session_state.step = 4  # Skip to pesticide
            st.rerun()
    with col2:
        if st.button("рдЪрд╛рд╡рд▓ ЁЯМ╛", key="crop_rice"):
            st.session_state.selected_crop = "rice"
            st.session_state.step = 4
            st.rerun()
    with col3:
        if st.button("рдордХреНрдХрд╛ ЁЯМ╜", key="crop_maize"):
            st.session_state.selected_crop = "maize"
            st.session_state.step = 4
            st.rerun()
    with col4:
        if st.button("рдХрдкрд╛рд╕ ЁЯз╡", key="crop_cotton"):
            st.session_state.selected_crop = "cotton"
            st.session_state.step = 4
            st.rerun()
    with col5:
        if st.button("рдЧрдиреНрдирд╛ ЁЯк┤", key="crop_sugarcane"):
            st.session_state.selected_crop = "sugarcane"
            st.session_state.step = 4
            st.rerun()
    if st.button("рд╡рд╛рдкрд╕ рдЬрд┐рд▓рд╛ тмЕя╕П", key="back_district"):
        st.session_state.step = 1
        st.rerun()

elif st.session_state.step == 4:  # Pesticide
    st.header(f"ЁЯЫбя╕П {st.session_state.selected_crop} рдХреЗ рд▓рд┐рдП рдХреАрдЯрдирд╛рд╢рдХ/рджрд╡рд╛ рд╕рд▓рд╛рд╣")
    suggestion = get_pesticide_suggestion(st.session_state.selected_crop)
    st.markdown(suggestion)
    col1, col2 = st.columns(2)
    with col1:
        if st.button("рдореВрд▓реНрдп рджреЗрдЦреЗрдВ ЁЯТ░", key="view_prices"):
            prices_msg, revenue = get_crop_prices_display(st.session_state.selected_crop)
            st.session_state.revenue_estimate = revenue
            st.session_state.step = 5
            st.rerun()
    with col2:
        if st.button("рд╡рд╛рдк
