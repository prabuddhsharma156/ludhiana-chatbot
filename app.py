import streamlit as st
import requests
from datetime import datetime, timedelta

# Load API key from Streamlit Secrets (secure - set this in Streamlit Cloud dashboard)
WEATHER_API_KEY = st.secrets.get("WEATHER_API_KEY", "a471efb91f4c4e29ac9135831252209")  # Fallback for local testing

# Crop to pesticide mapping (Hindi descriptions)
pesticide_suggestions = {
    "wheat": "рдлрдВрдЧреАрд╕рд╛рдЗрдб XYZ (рдЙрджрд╛рд╣рд░рдг: рдХрд╛рд░реНрдмреЗрдВрдбрд╛рдЬрд┐рдо) - рдЬрдВрдЧ рдФрд░ рд╕реНрдордЯ рд╕реЗ рд╕реБрд░рдХреНрд╖рд╛ред",
    "rice": "рдХреАрдЯрдирд╛рд╢рдХ ABC (рдЙрджрд╛рд╣рд░рдг: рдЗрдорд┐рдбрд╛рдХреНрд▓реЛрдкреНрд░рд┐рдб) - рддрдирд╛ рдмреЛрд░рд░ рдФрд░ рдкрддреНрддреА рдлреЛрд▓реНрдбрд░ рдирд┐рдпрдВрддреНрд░рдгред",
    "maize": "рдЦрд░рдкрддрд╡рд╛рд░рдирд╛рд╢рдХ DEF (рдЙрджрд╛рд╣рд░рдг: рдПрдЯреНрд░рд╛рдЬреАрди) - рдШрд╛рд╕ рдФрд░ рдЪреМрдбрд╝реА рдкрддреНрддреА рд╡рд╛рд▓реЗ рдЦрд░рдкрддрд╡рд╛рд░ рдкреНрд░рдмрдВрдзрдиред",
    "cotton": "рдХреАрдЯрдирд╛рд╢рдХ GHI (рдЙрджрд╛рд╣рд░рдг: рдПрдВрдбреЛрд╕рд▓реНрдлрд╛рди) - рдмреЛрд▓рд╡рд░реНрдо рдФрд░ рдПрдлрд┐рдбреНрд╕ рдкрд░ рдирд┐рд╢рд╛рдирд╛ред",
    "sugarcane": "рдХреАрдЯрдирд╛рд╢рдХ JKL (рдЙрджрд╛рд╣рд░рдг: рдХреНрд▓реЛрд░рдкрд╛рдпрд░реАрдлреЙрд╕) - рдмреЛрд░рд░ рдФрд░ рджреАрдордХ рд╕реЗ рд▓рдбрд╝рд╛рдИред",
}

# All 28 Indian States with 4-5 major districts each (Hindi names, agri-focused where possible)
states_districts = {
    "рдЖрдВрдзреНрд░ рдкреНрд░рджреЗрд╢": ["рд╡рд┐рд╢рд╛рдЦрд╛рдкрддреНрддрдирдо", "рд╡рд┐рдЬрдпрд╡рд╛рдбрд╝рд╛", "рдЧреБрдВрдЯреВрд░", "рдХреБрд░рдиреВрд▓", "рдЕрдирдВрддрдкреБрд░"],
    "рдЕрд░реБрдгрд╛рдЪрд▓ рдкреНрд░рджреЗрд╢": ["рдЗрдЯрд╛рдирдЧрд░", "рддрд╡рд╛рдВрдЧ", "рдкрд╛рдкреБрдо рдкрд╛рд░реЗ", "рд▓реЛрд╣рд┐рдд"],
    "рдЕрд╕рдо": ["рдЧреБрд╡рд╛рд╣рд╛рдЯреА", "рдбрд┐рдмреНрд░реВрдЧрдврд╝", "рдЬреЛрд░рд╣рд╛рдЯ", "рд╕рд┐рд▓рдЪрд░", "рдХрд╛рдорд░реВрдк"],
    "рдмрд┐рд╣рд╛рд░": ["рдкрдЯрдирд╛", "рдЧрдпрд╛", "рднрд╛рдЧрд▓рдкреБрд░", "рдореБрдЬрдлреНрдлрд░рдкреБрд░", "рдкреВрд░реНрдгрд┐рдпрд╛"],
    "рдЫрддреНрддреАрд╕рдЧрдврд╝": ["рд░рд╛рдпрдкреБрд░", "рджреБрд░реНрдЧ", "рдмрд┐рд▓рд╛рд╕рдкреБрд░", "рд░рд╛рдпрдЧрдврд╝", "рдЬрд╛рдВрдЬрдЧреАрд░-рдЪрд╛рдВрдкрд╛"],
    "рдЧреЛрд╡рд╛": ["рдкрдгрдЬреА", "рдорд╛рд░реНрдЧрд╛рд╡", "рд╕рд╛рдЙрд╕ рдЧреЛрд╡рд╛", "рдиреЙрд░реНрде рдЧреЛрд╡рд╛"],
    "рдЧреБрдЬрд░рд╛рдд": ["рдЕрд╣рдорджрд╛рдмрд╛рдж", "рд╕реВрд░рдд", "рд╡рдбреЛрджрд░рд╛", "рд░рд╛рдЬрдХреЛрдЯ", "рднрд╛рд╡рдирдЧрд░"],
    "рд╣рд░рд┐рдпрд╛рдгрд╛": ["рдХрд░рдирд╛рд▓", "рдЕрдВрдмрд╛рд▓рд╛", "рдХреБрд░реБрдХреНрд╖реЗрддреНрд░", "рд╕рд┐рд░рд╕рд╛", "рдлрд░реАрджрд╛рдмрд╛рдж"],
    "рд╣рд┐рдорд╛рдЪрд▓ рдкреНрд░рджреЗрд╢": ["рд╢рд┐рдорд▓рд╛", "рдордВрдбреА", "рдХреБрд▓реНрд▓реВ", "рдХрд╛рдВрдЧрдбрд╝рд╛", "рд╕реЛрд▓рди"],
    "рдЭрд╛рд░рдЦрдВрдб": ["рд░рд╛рдВрдЪреА", "рдзрдирдмрд╛рдж", "рдЬрдорд╢реЗрджрдкреБрд░", "рдЧрд┐рд░рд┐рдбреАрд╣", "рд╣рдЬрд╛рд░реАрдмрд╛рдЧ"],
    "рдХрд░реНрдирд╛рдЯрдХ": ["рдмреЗрдВрдЧрд▓реБрд░реБ", "рдореИрд╕реВрд░", "рд╣реБрдмрд▓реА", "рдмреЗрд▓рдЧрд╛рдо", "рдордВрдЧрд▓реБрд░реБ"],
    "рдХреЗрд░рд▓": ["рддрд┐рд░реБрд╡рдирдВрддрдкреБрд░рдо", "рдХреЛрдЪреНрдЪрд┐", "рдХреЛрдЭрд┐рдХреЛрдб", "рддреНрд░рд┐рд╢реВрд░", "рдХреЛрдЯреНрдЯрд╛рдпрдо"],
    "рдордзреНрдп рдкреНрд░рджреЗрд╢": ["рднреЛрдкрд╛рд▓", "рдЗрдВрджреМрд░", "рдЧреНрд╡рд╛рд▓рд┐рдпрд░", "рдЬрдмрд▓рдкреБрд░", "рдЙрдЬреНрдЬреИрди"],
    "рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░": ["рдореБрдВрдмрдИ", "рдкреБрдгреЗ", "рдирд╛рдЧрдкреБрд░", "рдирд╛рд╕рд┐рдХ", "рдЕрдорд░рд╛рд╡рддреА"],
    "рдордгрд┐рдкреБрд░": ["рдЗрдореНрдлрд╛рд▓ рдкреВрд░реНрд╡", "рдЗрдореНрдлрд╛рд▓ рдкрд╢реНрдЪрд┐рдо", "рдмрд┐рд╢реНрдиреБрдкреБрд░", "рдереМрдмрд▓"],
    "рдореЗрдШрд╛рд▓рдп": ["рд╢рд┐рд▓рд╛рдВрдЧ", "рдИрд╕реНрдЯ рдЦрд╛рд╕реА рд╣рд┐рд▓реНрд╕", "рд╡реЗрд╕реНрдЯ рдЧрд╛рд░реЛ рд╣рд┐рд▓реНрд╕", "рдИрд╕реНрдЯ рдЧрд╛рд░реЛ рд╣рд┐рд▓реНрд╕"],
    "рдорд┐рдЬреЛрд░рдо": ["рдЖрдЗрдЬреЛрд▓", "рд▓реБрдВрдЧрд▓реЗрдИ", "рдЪрдореНрдлрд╛рдИ", "рдХреМрд▓рдХ"],
    "рдирд╛рдЧрд╛рд▓реИрдВрдб": ["рдХреЛрд╣рд┐рдорд╛", "рджрд┐рдорд╛рдкреБрд░", "рдореЛрдХреЛрдХрдЪреБрдВрдЧ", "рддреБрдХреЗрд╕рд╛рдВрдЧ"],
    "рдУрдбрд┐рд╢рд╛": ["рднреБрд╡рдиреЗрд╢реНрд╡рд░", "рдХрдЯрдХ", "рдмрд░рдореНрдкреБрд░", "рд░рд╛рдЙрд░рдХреЗрд▓рд╛", "рдмрд╛рд▓рд╛рд╕реЛрд░"],
    "рдкрдВрдЬрд╛рдм": ["рд▓реБрдзрд┐рдпрд╛рдирд╛", "рдЕрдореГрддрд╕рд░", "рдЬрд╛рд▓рдВрдзрд░", "рдкрдЯрд┐рдпрд╛рд▓рд╛", "рдмрдард┐рдВрдбрд╛"],
    "рд░рд╛рдЬрд╕реНрдерд╛рди": ["рдЬрдпрдкреБрд░", "рдЬреЛрдзрдкреБрд░", "рдЙрджрдпрдкреБрд░", "рдХреЛрдЯрд╛", "рдмреАрдХрд╛рдиреЗрд░"],
    "рд╕рд┐рдХреНрдХрд┐рдо": ["рдЧрдВрдЧрдЯреЛрдХ", "рдордВрдЧрди", "рдИрд╕реНрдЯ рд╕рд┐рдХреНрдХрд┐рдо", "рд╡реЗрд╕реНрдЯ рд╕рд┐рдХреНрдХрд┐рдо"],
    "рддрдорд┐рд▓рдирд╛рдбреБ": ["рдЪреЗрдиреНрдирдИ", "рдХреЛрдпрдВрдмрдЯреВрд░", "рдорджреБрд░реИ", "рддрд┐рд░реБрдЪрд┐рд░рд╛рдкрд▓реНрд▓реА", "рд╕рд▓реЗрдо"],
    "рддреЗрд▓рдВрдЧрд╛рдирд╛": ["рд╣реИрджрд░рд╛рдмрд╛рдж", "рд╡рд░рдВрдЧрд▓", "рдирд┐рдЬрд╛рдорд╛рдмрд╛рдж", "рдЦрдореНрдордо", "рдорд╣рдмреВрдмрдирдЧрд░"],
    "рддреНрд░рд┐рдкреБрд░рд╛": ["рдЕрдЧрд░рддрд▓рд╛", "рдЙрдирд╛рдХреЛрдЯреА", "рд╡реЗрд╕реНрдЯ рддреНрд░рд┐рдкреБрд░рд╛", "рд╕рд┐рдкрд╛рд╣рд┐рдЬрд╛рд▓рд╛"],
    "рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢": ["рд▓рдЦрдирдК", "рдХрд╛рдирдкреБрд░", "рдЖрдЧрд░рд╛", "рд╡рд╛рд░рд╛рдгрд╕реА", "рдореЗрд░рда"],
    "рдЙрддреНрддрд░рд╛рдЦрдВрдб": ["рджреЗрд╣рд░рд╛рджреВрди", "рд╣рд░рд┐рджреНрд╡рд╛рд░", "рдЙрдзрдо рд╕рд┐рдВрд╣ рдирдЧрд░", "рдиреИрдиреАрддрд╛рд▓"],
    "рдкрд╢реНрдЪрд┐рдо рдмрдВрдЧрд╛рд▓": ["рдХреЛрд▓рдХрд╛рддрд╛", "рд╣рд╛рд╡рдбрд╝рд╛", "рджрд░рдЬреАрд▓рд┐рдВрдЧ", "рдмрд░реНрдзрдорд╛рди", "рдорд╛рд▓рджрд╛"],
}

# Real crop prices: National India-wide averages (Oct 2024 data from Agmarknet/CommodityOnline - static for stability)
# Sources: Recent mandi averages (e.g., Wheat тВ╣2450 from Ludhiana/Delhi; works tomorrow without updates)
crop_prices = {
    "wheat": {"modal_price": 2450, "min_price": 2400, "max_price": 2500, "avg_yield_quintal_per_acre": 20},
    "rice": {"modal_price": 2150, "min_price": 2100, "max_price": 2200, "avg_yield_quintal_per_acre": 25},
    "maize": {"modal_price": 1850, "min_price": 1800, "max_price": 1900, "avg_yield_quintal_per_acre": 18},
    "cotton": {"modal_price": 6700, "min_price": 6600, "max_price": 6800, "avg_yield_quintal_per_acre": 10},
    "sugarcane": {"modal_price": 360, "min_price": 350, "max_price": 370, "avg_yield_quintal_per_acre": 400},
}

# Streamlit App (Hindi title and config)
st.set_page_config(page_title="10-рджрд┐рди рдореМрд╕рдо рдФрд░ рдлрд╕рд▓ рд╕рд▓рд╛рд╣ рдЪреИрдЯрдмреЙрдЯ", page_icon="ЁЯМдя╕П", layout="centered")

st.title("ЁЯМдя╕П рднрд╛рд░рддреАрдп рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП 10-рджрд┐рди рдореМрд╕рдо, рдлрд╕рд▓ рд╕рд▓рд╛рд╣ рдФрд░ рд▓рд╛рдн рдХреИрд▓рдХреБрд▓реЗрдЯрд░")
st.markdown("---")

# Initialize session state for steps (no chat input - button-based)
if "step" not in st.session_state:
    st.session_state.step = 0  # 0: State, 1: District, 2: Weather, 3: Crop, 4: Pesticide, 5: Prices, 6: Profit
if "selected_state" not in st.session_state:
    st.session_state.selected_state = ""
if "selected_district" not in st.session_state:
    st.session_state.selected_district = ""
if "selected_crop" not in st.session_state:
    st.session_state.selected_crop = ""
if "total_cost" not in st.session_state:
    st.session_state.total_cost = 0  # For profit calc
if "revenue_estimate" not in st.session_state:
    st.session_state.revenue_estimate = 0

# Function to fetch 10-day forecast for selected district
@st.cache_data(ttl=1800)  # Cache for 30 minutes
def get_10day_forecast(district):
    days = 10
    url = f"http://api.weatherapi.com/v1/forecast.json?key={WEATHER_API_KEY}&q={district},India&days={days}"
    try:
        response = requests.get(url)
        data = response.json()
        if response.status_code == 200:
            forecast_list = []
            for i in range(days):
                day_data = data["forecast"]["forecastday"][i]
                date = day_data["date"]
                max_temp = day_data["day"]["maxtemp_c"]
                min_temp = day_data["day"]["mintemp_c"]
                avg_temp = day_data["day"]["avgtemp_c"]
                condition = day_data["day"]["condition"]["text"]
                weather_emoji = "тШАя╕П" if "sunny" in condition.lower() else "ЁЯМдя╕П" if "cloudy" in condition.lower() else "ЁЯМзя╕П" if "rain" in condition.lower() else "тЫЕ"
                forecast_list.append({
                    "date": date,
                    "max_temp": max_temp,
                    "min_temp": min_temp,
                    "avg_temp": avg_temp,
                    "condition": condition,
                    "emoji": weather_emoji
                })
            return forecast_list
        else:
            return None
    except Exception as e:
        st.error(f"рдореМрд╕рдо рдбреЗрдЯрд╛ рд▓рд╛рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")
        return None

# Function to get pesticide suggestion (Hindi)
def get_pesticide_suggestion(crop):
    crop_lower = crop.lower().strip()
    if crop_lower in pesticide_suggestions:
        return pesticide_suggestions[crop_lower]
    else:
        return "рдЗрд╕ рдлрд╕рд▓ рдХреЗ рд▓рд┐рдП рдХреЛрдИ рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╕реБрдЭрд╛рд╡ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВред рд╕реНрдерд╛рдиреАрдп рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рд▓реЗрдВред"

# Function to display crop prices (National table with real data)
def get_crop_prices_display(user_crop):
    if not crop_prices:
        return "рдореВрд▓реНрдп рдбреЗрдЯрд╛ рдЕрднреА рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВред agmarknet.nic.in рдкрд░ рдирд╡реАрдирддрдо рдЬрд╛рдВрдЪреЗрдВред"
    
    table_lines = ["**рднрд╛рд░рдд рдХреЗ рд╡рд░реНрддрдорд╛рди рдордВрдбреА рдореВрд▓реНрдп (тВ╣ рдкреНрд░рддрд┐ рдХреНрд╡рд┐рдВрдЯрд▓) - рдЕрдкрдбреЗрдЯ: " + datetime.now().strftime("%Y-%m-%d") + "**",
                   "| рдлрд╕рд▓ | рдореЛрдбрд▓ рдореВрд▓реНрдп | рдиреНрдпреВрди-рдЕрдзрд┐рдХрддрдо | рдЕрдиреБрдорд╛рдирд┐рдд рдЖрдп/рдПрдХрдбрд╝ (тВ╣) |",
                   "|------|-------------|-------------|-----------------------|"]
    
    total_revenue_estimate = 0
    crop_lower = user_crop.lower().strip()
    for crop, data in crop_prices.items():
        modal = data["modal_price"]
        min_max = f"{data['min_price']}-{data['max_price']}"
        yield_q = data["avg_yield_quintal_per_acre"]
        revenue = modal * yield_q
        table_lines.append(f"| {crop.capitalize()} | {modal} | {min_max} | {revenue:,} |")
        
        if crop_lower == crop:
            total_revenue_estimate = revenue
    
    table = "\n".join(table_lines)
    
    msg = f"{table}\n\n**рдЖрдкрдХреА рдлрд╕рд▓ ({user_crop}) рдХреЗ рд▓рд┐рдП рдЖрдп:** тВ╣{total_revenue_estimate:,}/рдПрдХрдбрд╝ (рдФрд╕рдд рдЙрдкрдЬ {crop_prices.get(crop_lower, {}).get('avg_yield_quintal_per_acre', 0)} рдХреНрд╡рд┐рдВрдЯрд▓/рдПрдХрдбрд╝)ред\n\n*рдиреЛрдЯ: рд░рд╛рд╖реНрдЯреНрд░реАрдп рдФрд╕рдд (Agmarknet рд╕реЗ)ред рд╡рд╛рд╕реНрддрд╡рд┐рдХ рдХреЗ рд▓рд┐рдП [Agmarknet](https://agmarknet.gov.in/SearchCmmMkt.aspx) рдЪреЗрдХ рдХрд░реЗрдВред*"
    
    return msg, total_revenue_estimate  # Return revenue for profit calc

# Function to calculate profit (new)
def calculate_profit(revenue, total_cost, crop):
    if total_cost > 0:
        profit = revenue - total_cost
        profit_emoji = "ЁЯТ░" if profit > 0 else "тЪая╕П" if profit == 0 else "ЁЯУЙ"
        return f"{profit_emoji} **{crop} рдХреЗ рд▓рд┐рдП рд▓рд╛рдн рдХреИрд▓рдХреБрд▓реЗрд╢рди:**\n- рдЕрдиреБрдорд╛рдирд┐рдд рдЖрдп: тВ╣{revenue:,}/рдПрдХрдбрд╝\n- рдХреБрд▓ рд▓рд╛рдЧрдд (рдЖрдкрдХреА рдЗрдирдкреБрдЯ): тВ╣{total_cost:,}/рдПрдХрдбрд╝\n- **рд╢реБрджреНрдз рд▓рд╛рдн: тВ╣{profit:,}/рдПрдХрдбрд╝** (рд▓рд╛рдЧрдд рдШрдЯрд╛рдХрд░)\n\n*рдЯрд┐рдк: рд╕рд╛рдорд╛рдиреНрдп рд▓рд╛рдЧрдд - рдЧреЗрд╣реВрдВ: тВ╣15,000-20,000/рдПрдХрдбрд╝ (рдмреАрдЬ, рдЦрд╛рдж, рд╢реНрд░рдо); рдЕрдкрдиреА рд╡рд╛рд╕реНрддрд╡рд┐рдХ рд▓рд╛рдЧрдд рдбрд╛рд▓реЗрдВред*"
    else:
        return f"**{crop} рдХреЗ рд▓рд┐рдП рдЖрдп:** тВ╣{revenue:,}/рдПрдХрдбрд╝ред рд▓рд╛рдЧрдд рдбрд╛рд▓рдХрд░ рд▓рд╛рдн рджреЗрдЦреЗрдВ!\n\n*рдЯрд┐рдк: рдХреБрд▓ рд▓рд╛рдЧрдд (рдмреАрдЬ + рд╢реНрд░рдо + рдЦрд╛рдж рдЖрджрд┐) рдбрд╛рд▓реЗрдВ (тВ╣ рдореЗрдВ)ред*"

# Main App Logic (Button-based steps)
if st.session_state.step == 0:
    st.header("ЁЯМН рдЕрдкрдирд╛ рд░рд╛рдЬреНрдп рдЪреБрдиреЗрдВ")
    selected_state = st.selectbox("рд░рд╛рдЬреНрдп:", list(states_districts.keys()))
    if st.button("рд░рд╛рдЬреНрдп рдЪреБрдиреЗрдВ ЁЯСЖ", key="select_state"):
        st.session_state.selected_state = selected_state
        st.session_state.step = 1
        st.rerun()

elif st.session_state.step == 1:
    st.header(f"ЁЯУН {st.session_state.selected_state} рдореЗрдВ рдЕрдкрдирд╛ рдЬрд┐рд▓рд╛ рдЪреБрдиреЗрдВ")
    districts = states_districts.get(st.session_state.selected_state, [])
    selected_district = st.selectbox("рдЬрд┐рд▓рд╛:", districts)
    if st.button("рдЬрд┐рд▓рд╛ рдЪреБрдиреЗрдВ ЁЯСЖ", key="select_district"):
        st.session_state.selected_district = selected_district
        st.session_state.step = 2
        st.rerun()
    if st.button("рд╡рд╛рдкрд╕ рд░рд╛рдЬреНрдп рдЪреБрдиреЗрдВ тмЕя╕П", key="back_state"):
        st.session_state.step = 0
        st.rerun()

elif st.session_state.step == 2:
    st.header(f"ЁЯМдя╕П {st.session_state.selected_district} рдХреЗ рд▓рд┐рдП 10-рджрд┐рди рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди")
    forecast_data = get_10day_forecast(st.session_state.selected_district)
    if forecast_data:
        st.markdown("**рдЖрдЬ рд╕реЗ рд╢реБрд░реВ 10-рджрд┐рди рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди:**")
        for day in forecast_data:
            st.markdown(f"- **{day['date']}** {day['emoji']}: рдЕрдзрд┐рдХрддрдо {day['max_temp']}┬░C / рдиреНрдпреВрдирддрдо {day['min_temp']}┬░C | рдФрд╕рдд {day['avg_temp']:.1f}┬░C | {day['condition']}")
        col1, col2, col3, col4, col5 = st.columns(5)
        with col1:
            if st.button("рдЧреЗрд╣реВрдВ ЁЯМ╛", key="crop_wheat"):
                st.session_state.selected_crop = "wheat"
                st.session_state.step = 3
                st.rerun()
        with col2:
            if st.button("рдЪрд╛рд╡рд▓ ЁЯМ╛", key="crop_rice"):
                st.session_state.selected_crop = "rice"
                st.session_state.step = 3
                st.rerun()
        with col3:
            if st.button("рдордХреНрдХрд╛ ЁЯМ╜", key="crop_maize"):
                st.session_state.selected_crop = "maize"
                st.session_state.step = 3
                st.rerun()
        with col4:
            if st.button("рдХрдкрд╛рд╕ ЁЯз╡", key="crop_cotton"):
                st.session_state.selected_crop = "cotton"
                st.session_state.step = 3
                st.rerun()
        with col5:
            if st.button("рдЧрдиреНрдирд╛ ЁЯк┤", key="crop_sugarcane"):
                st.session_state.selected_crop = "sugarcane"
                st.session_state.step = 3
                st.rerun()
    else:
        st.error("рдореМрд╕рдо рдбреЗрдЯрд╛ рд▓рд╛рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред API рдХреБрдВрдЬреА рд╕реЗрдЯ рдХрд░реЗрдВ рдпрд╛ рдкреБрдирдГ рдкреНрд░рдп
